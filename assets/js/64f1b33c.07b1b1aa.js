"use strict";(self.webpackChunkgfdoc=self.webpackChunkgfdoc||[]).push([[97201],{3858:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>l,metadata:()=>d,toc:()=>o});var s=t(74848),i=t(28453);const l={title:"\u901a\u7528\u7f16\u89e3\u7801-\u65b9\u6cd5\u4ecb\u7ecd",sidebar_position:5},r=void 0,d={id:"\u7ec4\u4ef6\u5217\u8868/\u7f16\u7801\u89e3\u7801/\u901a\u7528\u7f16\u89e3\u7801-gjson/\u901a\u7528\u7f16\u89e3\u7801-\u65b9\u6cd5\u4ecb\u7ecd",title:"\u901a\u7528\u7f16\u89e3\u7801-\u65b9\u6cd5\u4ecb\u7ecd",description:"\u4ee5\u4e0b\u5e38\u7528\u65b9\u6cd5\u5217\u8868\uff0c\u6587\u6863\u66f4\u65b0\u53ef\u80fd\u6ede\u540e\u4e8e\u4ee3\u7801\u65b0\u7279\u6027\uff0c\u66f4\u591a\u7684\u65b9\u6cd5\u53ca\u793a\u4f8b\u8bf7\u53c2\u8003\u4ee3\u7801\u6587\u6863\uff1a https://pkg.go.dev/github.com/gogf/gf/v2/encoding/gjson",source:"@site/versioned_docs/version-2.7.x/5-\u7ec4\u4ef6\u5217\u8868/3-\u7f16\u7801\u89e3\u7801/0-\u901a\u7528\u7f16\u89e3\u7801-gjson/5-\u901a\u7528\u7f16\u89e3\u7801-\u65b9\u6cd5\u4ecb\u7ecd.md",sourceDirName:"5-\u7ec4\u4ef6\u5217\u8868/3-\u7f16\u7801\u89e3\u7801/0-\u901a\u7528\u7f16\u89e3\u7801-gjson",slug:"/\u7ec4\u4ef6\u5217\u8868/\u7f16\u7801\u89e3\u7801/\u901a\u7528\u7f16\u89e3\u7801-gjson/\u901a\u7528\u7f16\u89e3\u7801-\u65b9\u6cd5\u4ecb\u7ecd",permalink:"/gf-site/docs/2.7.x/\u7ec4\u4ef6\u5217\u8868/\u7f16\u7801\u89e3\u7801/\u901a\u7528\u7f16\u89e3\u7801-gjson/\u901a\u7528\u7f16\u89e3\u7801-\u65b9\u6cd5\u4ecb\u7ecd",draft:!1,unlisted:!1,editUrl:"https://github.com/gogf/gf-site/blob/main/versioned_docs/version-2.7.x/5-\u7ec4\u4ef6\u5217\u8868/3-\u7f16\u7801\u89e3\u7801/0-\u901a\u7528\u7f16\u89e3\u7801-gjson/5-\u901a\u7528\u7f16\u89e3\u7801-\u65b9\u6cd5\u4ecb\u7ecd.md",tags:[],version:"2.7.x",lastUpdatedBy:"John",lastUpdatedAt:172999724e4,sidebarPosition:5,frontMatter:{title:"\u901a\u7528\u7f16\u89e3\u7801-\u65b9\u6cd5\u4ecb\u7ecd",sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"\u901a\u7528\u7f16\u89e3\u7801-\u6570\u636e\u683c\u5f0f\u8f6c\u6362",permalink:"/gf-site/docs/2.7.x/\u7ec4\u4ef6\u5217\u8868/\u7f16\u7801\u89e3\u7801/\u901a\u7528\u7f16\u89e3\u7801-gjson/\u901a\u7528\u7f16\u89e3\u7801-\u6570\u636e\u683c\u5f0f\u8f6c\u6362"},next:{title:"\u901a\u7528\u7f16\u89e3\u7801-FAQ",permalink:"/gf-site/docs/2.7.x/\u7ec4\u4ef6\u5217\u8868/\u7f16\u7801\u89e3\u7801/\u901a\u7528\u7f16\u89e3\u7801-gjson/\u901a\u7528\u7f16\u89e3\u7801-FAQ"}},c={},o=[{value:"<code>New</code>",id:"new",level:3},{value:"<code>NewWithTag</code>",id:"newwithtag",level:3},{value:"<code>NewWithOptions</code>",id:"newwithoptions",level:3},{value:"<code>Load</code>",id:"load",level:3},{value:"<code>LoadJson</code>",id:"loadjson",level:3},{value:"<code>LoadXml</code>",id:"loadxml",level:3},{value:"LoadIni",id:"loadini",level:3},{value:"<code>LoadYaml</code>",id:"loadyaml",level:3},{value:"<code>LoadToml</code>",id:"loadtoml",level:3},{value:"<code>LoadContent</code>",id:"loadcontent",level:3},{value:"LoadContentType",id:"loadcontenttype",level:3},{value:"<code>IsValidDataType</code>",id:"isvaliddatatype",level:3},{value:"<code>Valid</code>",id:"valid",level:3},{value:"Marshal",id:"marshal",level:3},{value:"<code>MarshalIndent</code>",id:"marshalindent",level:3},{value:"Unmarshal",id:"unmarshal",level:3},{value:"Encode",id:"encode",level:3},{value:"<code>MustEncode</code>",id:"mustencode",level:3},{value:"<code>EncodeString</code>",id:"encodestring",level:3},{value:"<code>MustEncodeString</code>",id:"mustencodestring",level:3},{value:"<code>Decode</code>",id:"decode",level:3},{value:"DecodeTo",id:"decodeto",level:3},{value:"<code>DecodeToJson</code>",id:"decodetojson",level:3},{value:"<code>SetSplitChar</code>",id:"setsplitchar",level:3},{value:"<code>SetViolenceCheck</code>",id:"setviolencecheck",level:3},{value:"<code>ToJson</code>",id:"tojson",level:3},{value:"<code>ToJsonString</code>",id:"tojsonstring",level:3},{value:"ToJsonIndent",id:"tojsonindent",level:3},{value:"<code>ToJsonIndentString</code>",id:"tojsonindentstring",level:3},{value:"MustToJson",id:"musttojson",level:3},{value:"<code>MustToJsonString</code>",id:"musttojsonstring",level:3},{value:"MustToJsonIndent",id:"musttojsonindent",level:3},{value:"<code>MustToJsonIndentString</code>",id:"musttojsonindentstring",level:3},{value:"ToXml",id:"toxml",level:3},{value:"<code>ToXmlString</code>",id:"toxmlstring",level:3},{value:"ToXmlIndent",id:"toxmlindent",level:3},{value:"<code>ToXmlIndentString</code>",id:"toxmlindentstring",level:3},{value:"MustToXml",id:"musttoxml",level:3},{value:"<code>MustToXmlString</code>",id:"musttoxmlstring",level:3},{value:"MustToXmlIndent",id:"musttoxmlindent",level:3},{value:"<code>MustToXmlIndentString</code>",id:"musttoxmlindentstring",level:3},{value:"ToYaml",id:"toyaml",level:3},{value:"ToYamlIndent",id:"toyamlindent",level:3},{value:"<code>ToYamlString</code>",id:"toyamlstring",level:3},{value:"<code>MustToYaml</code>",id:"musttoyaml",level:3},{value:"MustToYamlString",id:"musttoyamlstring",level:3},{value:"<code>ToToml</code>",id:"totoml",level:3},{value:"ToTomlString",id:"totomlstring",level:3},{value:"<code>MustToToml</code>",id:"musttotoml",level:3},{value:"MustToTomlString",id:"musttotomlstring",level:3},{value:"<code>ToIni</code>",id:"toini",level:3},{value:"ToIniString",id:"toinistring",level:3},{value:"<code>MustToIni</code>",id:"musttoini",level:3},{value:"MustToIniString",id:"musttoinistring",level:3},{value:"MarshalJSON",id:"marshaljson",level:3},{value:"UnmarshalJSON",id:"unmarshaljson",level:3},{value:"<code>UnmarshalValue</code>",id:"unmarshalvalue",level:3},{value:"<code>MapStrAny</code>",id:"mapstrany",level:3},{value:"Interfaces",id:"interfaces",level:3},{value:"<code>Interface</code>",id:"interface",level:3},{value:"<code>Var</code>",id:"var",level:3},{value:"IsNil",id:"isnil",level:3},{value:"<code>Get</code>",id:"get",level:3},{value:"<code>GetJson</code>",id:"getjson",level:3},{value:"GetJsons",id:"getjsons",level:3},{value:"<code>GetJsonMap</code>",id:"getjsonmap",level:3},{value:"<code>Set</code>",id:"set",level:3},{value:"<code>MustSet</code>",id:"mustset",level:3},{value:"<code>Remove</code>",id:"remove",level:3},{value:"MustRemove",id:"mustremove",level:3},{value:"<code>Contains</code>",id:"contains",level:3},{value:"Len",id:"len",level:3},{value:"<code>Append</code>",id:"append",level:3},{value:"MustAppend",id:"mustappend",level:3},{value:"Map",id:"map",level:3},{value:"Array",id:"array",level:3},{value:"<code>Scan</code>",id:"scan",level:3},{value:"Dump",id:"dump",level:3}];function j(n){const e={a:"a",code:"code",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(e.p,{children:["\u4ee5\u4e0b\u5e38\u7528\u65b9\u6cd5\u5217\u8868\uff0c\u6587\u6863\u66f4\u65b0\u53ef\u80fd\u6ede\u540e\u4e8e\u4ee3\u7801\u65b0\u7279\u6027\uff0c\u66f4\u591a\u7684\u65b9\u6cd5\u53ca\u793a\u4f8b\u8bf7\u53c2\u8003\u4ee3\u7801\u6587\u6863\uff1a ",(0,s.jsx)(e.a,{href:"https://pkg.go.dev/github.com/gogf/gf/v2/os/gres",children:"https://pkg.go.dev/github.com/gogf/gf/v2/encoding/gjson"})]}),"\n",(0,s.jsx)(e.h3,{id:"new",children:(0,s.jsx)(e.code,{children:"New"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["\u8bf4\u660e\uff1a ",(0,s.jsx)(e.code,{children:"New"})," \u53ef\u4ee5\u7528\u4efb\u610f\u7c7b\u578b\u7684\u503c ",(0,s.jsx)(e.code,{children:"data"})," \u521b\u5efa\u4e00\u4e2a ",(0,s.jsx)(e.code,{children:"Json"})," \u5bf9\u8c61\uff0c\u4f46\u662f\u7531\u4e8e\u6570\u636e\u8bbf\u95ee\u7684\u5173\u7cfb\uff0c ",(0,s.jsx)(e.code,{children:"data"})," \u5e94\u8be5\u662f\u4e00\u4e2a ",(0,s.jsx)(e.code,{children:"map"})," \u6216\u8005 ",(0,s.jsx)(e.code,{children:"slice"}),"\uff0c\u5426\u5219\u662f\u65e0\u610f\u4e49\u7684\u3002"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["\u6ce8\u610f\uff1a ",(0,s.jsx)(e.code,{children:"safe"})," \u53c2\u6570\u51b3\u5b9a\u4e86 ",(0,s.jsx)(e.code,{children:"Json"})," \u5bf9\u8c61\u662f\u5426\u662f\u5e76\u53d1\u5b89\u5168\u7684\uff0c\u9ed8\u8ba4\u4e3a ",(0,s.jsx)(e.code,{children:"false"})]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"\u683c\u5f0f\uff1a"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"func New(data interface{}, safe ...bool) *Json\n"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"\u793a\u4f8b\uff1a"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'func ExampleNew() {\n  \tjsonContent := `{"name":"john", "score":"100"}`\n  \tj := gjson.New(jsonContent)\n  \tfmt.Println(j.Get("name"))\n  \tfmt.Println(j.Get("score"))\n\n  \t// Output:\n  \t// john\n  \t// 100\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"newwithtag",children:(0,s.jsx)(e.code,{children:"NewWithTag"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["\u8bf4\u660e\uff1a ",(0,s.jsx)(e.code,{children:"NewWithTag"})," \u53ef\u4ee5\u7528\u4efb\u610f\u7c7b\u578b\u7684\u503c ",(0,s.jsx)(e.code,{children:"data"})," \u521b\u5efa\u4e00\u4e2a ",(0,s.jsx)(e.code,{children:"Json"})," \u5bf9\u8c61\uff0c\u4f46\u662f\u7531\u4e8e\u6570\u636e\u8bbf\u95ee\u7684\u5173\u7cfb\uff0c ",(0,s.jsx)(e.code,{children:"data"})," \u5e94\u8be5\u662f\u4e00\u4e2a ",(0,s.jsx)(e.code,{children:"map"})," \u6216\u8005 ",(0,s.jsx)(e.code,{children:"slice"}),"\uff0c\u5426\u5219\u662f\u65e0\u610f\u4e49\u7684\u3002"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["\u6ce8\u610f\uff1a ",(0,s.jsx)(e.code,{children:"tgts"})," \u53c2\u6570\u6307\u5b9a\u4e86\u7ed3\u6784\u4f53\u8f6c\u6362\u5230map\u7684\u6807\u7b7e\u540d\u7684\u4f18\u5148\u7ea7\uff0c\u591a\u4e2a\u6807\u7b7e\u7528 ",(0,s.jsx)(e.code,{children:"','"})," \u5206\u5272\u3002"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.code,{children:"safe"})," \u53c2\u6570\u51b3\u5b9a\u4e86 ",(0,s.jsx)(e.code,{children:"Json"})," \u5bf9\u8c61\u662f\u5426\u662f\u5e76\u53d1\u5b89\u5168\u7684\uff0c\u9ed8\u8ba4\u4e3a ",(0,s.jsx)(e.code,{children:"false"})]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"\u683c\u5f0f\uff1a"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"func NewWithTag(data interface{}, tags string, safe ...bool) *Json\n"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"\u793a\u4f8b\uff1a"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'func ExampleNewWithTag() {\n  \ttype Me struct {\n  \t\tName  string `tag:"name"`\n  \t\tScore int    `tag:"score"`\n  \t\tTitle string\n  \t}\n  \tme := Me{\n  \t\tName:  "john",\n  \t\tScore: 100,\n  \t\tTitle: "engineer",\n  \t}\n  \tj := gjson.NewWithTag(me, "tag", true)\n  \tfmt.Println(j.Get("name"))\n  \tfmt.Println(j.Get("score"))\n  \tfmt.Println(j.Get("Title"))\n\n  \t// Output:\n  \t// john\n  \t// 100\n  \t// engineer\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"newwithoptions",children:(0,s.jsx)(e.code,{children:"NewWithOptions"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["\u8bf4\u660e\uff1a ",(0,s.jsx)(e.code,{children:"NewWithOptions"})," \u53ef\u4ee5\u7528\u4efb\u610f\u7c7b\u578b\u7684\u503c ",(0,s.jsx)(e.code,{children:"data"})," \u521b\u5efa\u4e00\u4e2a ",(0,s.jsx)(e.code,{children:"Json"})," \u5bf9\u8c61\uff0c\u4f46\u662f\u7531\u4e8e\u6570\u636e\u8bbf\u95ee\u7684\u5173\u7cfb\uff0c ",(0,s.jsx)(e.code,{children:"data"})," \u5e94\u8be5\u662f\u4e00\u4e2a ",(0,s.jsx)(e.code,{children:"map"})," \u6216\u8005 ",(0,s.jsx)(e.code,{children:"slice"}),"\uff0c\u5426\u5219\u662f\u65e0\u610f\u4e49\u7684\u3002"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"\u683c\u5f0f\uff1a"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"func NewWithOptions(data interface{}, options Options) *Json\n"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"\u793a\u4f8b\uff1a"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'func ExampleNewWithOptions() {\n  \ttype Me struct {\n  \t\tName  string `tag:"name"`\n  \t\tScore int    `tag:"score"`\n  \t\tTitle string\n  \t}\n  \tme := Me{\n  \t\tName:  "john",\n  \t\tScore: 100,\n  \t\tTitle: "engineer",\n  \t}\n\n  \tj := gjson.NewWithOptions(me, gjson.Options{\n  \t\tTags: "tag",\n  \t})\n  \tfmt.Println(j.Get("name"))\n  \tfmt.Println(j.Get("score"))\n  \tfmt.Println(j.Get("Title"))\n\n  \t// Output:\n  \t// john\n  \t// 100\n  \t// engineer\n}\n'})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'func ExampleNewWithOptions_UTF8BOM() {\n  \tjsonContent := `{"name":"john", "score":"100"}`\n\n  \tcontent := make([]byte, 3, len(jsonContent)+3)\n  \tcontent[0] = 0xEF\n  \tcontent[1] = 0xBB\n  \tcontent[2] = 0xBF\n  \tcontent = append(content, jsonContent...)\n\n  \tj := gjson.NewWithOptions(content, gjson.Options{\n  \t\tTags: "tag",\n  \t})\n  \tfmt.Println(j.Get("name"))\n  \tfmt.Println(j.Get("score"))\n\n  \t// Output:\n  \t// john\n  \t// 100\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"load",children:(0,s.jsx)(e.code,{children:"Load"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["\u8bf4\u660e\uff1a",(0,s.jsx)(e.code,{children:"Load"})," \u4ece\u6307\u5b9a\u7684\u6587\u4ef6 ",(0,s.jsx)(e.code,{children:"path"})," \u4e2d\u52a0\u8f7d\u5185\u5bb9\uff0c\u5e76\u5c06\u5176\u5185\u5bb9\u521b\u5efa\u4e00\u4e2a ",(0,s.jsx)(e.code,{children:"Json"})," \u5bf9\u8c61\u3002"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"\u683c\u5f0f\uff1a"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"func Load(path string, safe ...bool) (*Json, error)\n"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"\u793a\u4f8b\uff1a"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'func ExampleLoad() {\n  \tjsonFilePath := gtest.DataPath("json", "data1.json")\n  \tj, _ := gjson.Load(jsonFilePath)\n  \tfmt.Println(j.Get("name"))\n  \tfmt.Println(j.Get("score"))\n\n  \tnotExistFilePath := gtest.DataPath("json", "data2.json")\n  \tj2, _ := gjson.Load(notExistFilePath)\n  \tfmt.Println(j2.Get("name"))\n\n  \t// Output:\n  \t// john\n  \t// 100\n}\n'})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'func ExampleLoad_Xml() {\n  \tjsonFilePath := gtest.DataPath("xml", "data1.xml")\n  \tj, _ := gjson.Load(jsonFilePath)\n  \tfmt.Println(j.Get("doc.name"))\n  \tfmt.Println(j.Get("doc.score"))\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"loadjson",children:(0,s.jsx)(e.code,{children:"LoadJson"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["\u8bf4\u660e\uff1a ",(0,s.jsx)(e.code,{children:"LoadJson"})," \u7528\u7ed9\u5b9a\u7684 ",(0,s.jsx)(e.code,{children:"JSON"})," \u683c\u5f0f\u7684\u5185\u5bb9\u521b\u5efa\u4e00\u4e2a ",(0,s.jsx)(e.code,{children:"Json"})," \u5bf9\u8c61\u3002"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"\u683c\u5f0f\uff1a"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"func LoadJson(data interface{}, safe ...bool) (*Json, error)\n"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"\u793a\u4f8b\uff1a"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'func ExampleLoadJson() {\n  \tjsonContent := `{"name":"john", "score":"100"}`\n  \tj, _ := gjson.LoadJson(jsonContent)\n  \tfmt.Println(j.Get("name"))\n  \tfmt.Println(j.Get("score"))\n\n  \t// Output:\n  \t// john\n  \t// 100\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"loadxml",children:(0,s.jsx)(e.code,{children:"LoadXml"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["\u8bf4\u660e\uff1a ",(0,s.jsx)(e.code,{children:"LoadXml"})," \u7528\u7ed9\u5b9a\u7684 ",(0,s.jsx)(e.code,{children:"XML"})," \u683c\u5f0f\u7684\u5185\u5bb9\u521b\u5efa\u4e00\u4e2a ",(0,s.jsx)(e.code,{children:"Json"})," \u5bf9\u8c61\u3002"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"\u683c\u5f0f\uff1a"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"func LoadXml(data interface{}, safe ...bool) (*Json, error)\n"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"\u793a\u4f8b\uff1a"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'func ExampleLoadXml() {\n  \txmlContent := `<?xml version="1.0" encoding="UTF-8"?>\n  \t<base>\n  \t\t<name>john</name>\n  \t\t<score>100</score>\n  \t</base>`\n  \tj, _ := gjson.LoadXml(xmlContent)\n  \tfmt.Println(j.Get("base.name"))\n  \tfmt.Println(j.Get("base.score"))\n\n  \t// Output:\n  \t// john\n  \t// 100\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"loadini",children:"LoadIni"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["\u8bf4\u660e\uff1a ",(0,s.jsx)(e.code,{children:"LoadIni"})," \u7528\u7ed9\u5b9a\u7684 ",(0,s.jsx)(e.code,{children:"INI"})," \u683c\u5f0f\u7684\u5185\u5bb9\u521b\u5efa\u4e00\u4e2a ",(0,s.jsx)(e.code,{children:"Json"})," \u5bf9\u8c61\u3002"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"\u683c\u5f0f\uff1a"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"func LoadIni(data interface{}, safe ...bool) (*Json, error)\n"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"\u793a\u4f8b\uff1a"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'func ExampleLoadIni() {\n  \tiniContent := `\n  \t[base]\n  \tname = john\n  \tscore = 100\n  \t`\n  \tj, _ := gjson.LoadIni(iniContent)\n  \tfmt.Println(j.Get("base.name"))\n  \tfmt.Println(j.Get("base.score"))\n\n  \t// Output:\n  \t// john\n  \t// 100\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"loadyaml",children:(0,s.jsx)(e.code,{children:"LoadYaml"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["\u8bf4\u660e\uff1a ",(0,s.jsx)(e.code,{children:"LoadYaml"})," \u7528\u7ed9\u5b9a\u7684 ",(0,s.jsx)(e.code,{children:"YAML"})," \u683c\u5f0f\u7684\u5185\u5bb9\u521b\u5efa\u4e00\u4e2a ",(0,s.jsx)(e.code,{children:"Json"})," \u5bf9\u8c61\u3002"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"\u683c\u5f0f\uff1a"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"func LoadYaml(data interface{}, safe ...bool) (*Json, error)\n"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"\u793a\u4f8b\uff1a"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'func ExampleLoadYaml() {\n  \tyamlContent :=\n  \t\t`base:\n    name: john\n    score: 100`\n\n  \tj, _ := gjson.LoadYaml(yamlContent)\n  \tfmt.Println(j.Get("base.name"))\n  \tfmt.Println(j.Get("base.score"))\n\n  \t// Output:\n  \t// john\n  \t// 100\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"loadtoml",children:(0,s.jsx)(e.code,{children:"LoadToml"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["\u8bf4\u660e\uff1a ",(0,s.jsx)(e.code,{children:"LoadToml"})," \u7528\u7ed9\u5b9a\u7684 ",(0,s.jsx)(e.code,{children:"TOML"})," \u683c\u5f0f\u7684\u5185\u5bb9\u521b\u5efa\u4e00\u4e2a ",(0,s.jsx)(e.code,{children:"Json"})," \u5bf9\u8c61\u3002"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"\u683c\u5f0f\uff1a"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"func LoadToml(data interface{}, safe ...bool) (*Json, error)\n"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"\u793a\u4f8b\uff1a"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'func ExampleLoadToml() {\n  \ttomlContent :=\n  \t\t`[base]\n    name = "john"\n    score = 100`\n\n  \tj, _ := gjson.LoadToml(tomlContent)\n  \tfmt.Println(j.Get("base.name"))\n  \tfmt.Println(j.Get("base.score"))\n\n  \t// Output:\n  \t// john\n  \t// 100\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"loadcontent",children:(0,s.jsx)(e.code,{children:"LoadContent"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["\u8bf4\u660e\uff1a",(0,s.jsx)(e.code,{children:"LoadContent"})," \u6839\u636e\u7ed9\u5b9a\u7684\u5185\u5bb9\u521b\u5efa\u4e00\u4e2a ",(0,s.jsx)(e.code,{children:"Json"})," \u5bf9\u8c61\uff0c\u5b83\u81ea\u52a8\u68c0\u67e5 ",(0,s.jsx)(e.code,{children:"content"})," \u7684\u6570\u636e\u7c7b\u578b\uff0c\u652f\u6301\u7684\u5185\u5bb9\u7c7b\u578b\u5982\u4e0b: ",(0,s.jsx)(e.code,{children:"JSON, XML, INI, YAML\u548cTOML"}),"\u3002"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"\u683c\u5f0f\uff1a"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"func LoadContent(data interface{}, safe ...bool) (*Json, error)\n"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"\u793a\u4f8b\uff1a"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'func ExampleLoadContent() {\n  \tjsonContent := `{"name":"john", "score":"100"}`\n\n  \tj, _ := gjson.LoadContent(jsonContent)\n\n  \tfmt.Println(j.Get("name"))\n  \tfmt.Println(j.Get("score"))\n\n  \t// Output:\n  \t// john\n  \t// 100\n}\n'})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'func ExampleLoadContent_UTF8BOM() {\n  \tjsonContent := `{"name":"john", "score":"100"}`\n\n  \tcontent := make([]byte, 3, len(jsonContent)+3)\n  \tcontent[0] = 0xEF\n  \tcontent[1] = 0xBB\n  \tcontent[2] = 0xBF\n  \tcontent = append(content, jsonContent...)\n\n  \tj, _ := gjson.LoadContent(content)\n\n  \tfmt.Println(j.Get("name"))\n  \tfmt.Println(j.Get("score"))\n\n  \t// Output:\n  \t// john\n  \t// 100\n}\n'})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'func ExampleLoadContent_Xml() {\n  \txmlContent := `<?xml version="1.0" encoding="UTF-8"?>\n  \t<base>\n  \t\t<name>john</name>\n  \t\t<score>100</score>\n  \t</base>`\n\n  \tx, _ := gjson.LoadContent(xmlContent)\n\n  \tfmt.Println(x.Get("base.name"))\n  \tfmt.Println(x.Get("base.score"))\n\n  \t// Output:\n  \t// john\n  \t// 100\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"loadcontenttype",children:"LoadContentType"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["\u8bf4\u660e\uff1a",(0,s.jsx)(e.code,{children:"LoadContentType"})," \u6839\u636e\u7ed9\u5b9a\u7684\u5185\u5bb9\u548c\u7c7b\u578b\u521b\u5efa\u4e00\u4e2a ",(0,s.jsx)(e.code,{children:"Json"})," \u5bf9\u8c61\uff0c\u652f\u6301\u7684\u5185\u5bb9\u7c7b\u578b\u5982\u4e0b: ",(0,s.jsx)(e.code,{children:"Json, XML, INI, YAML\u548cTOML"}),"\u3002"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"\u683c\u5f0f\uff1a"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"func LoadContentType(dataType string, data interface{}, safe ...bool) (*Json, error)\n"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"\u793a\u4f8b\uff1a"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'func ExampleLoadContentType() {\n  \tjsonContent := `{"name":"john", "score":"100"}`\n  \txmlContent := `<?xml version="1.0" encoding="UTF-8"?>\n  \t<base>\n  \t\t<name>john</name>\n  \t\t<score>100</score>\n  \t</base>`\n\n  \tj, _ := gjson.LoadContentType("json", jsonContent)\n  \tx, _ := gjson.LoadContentType("xml", xmlContent)\n  \tj1, _ := gjson.LoadContentType("json", "")\n\n  \tfmt.Println(j.Get("name"))\n  \tfmt.Println(j.Get("score"))\n  \tfmt.Println(x.Get("base.name"))\n  \tfmt.Println(x.Get("base.score"))\n  \tfmt.Println(j1.Get(""))\n\n  \t// Output:\n  \t// john\n  \t// 100\n  \t// john\n  \t// 100\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"isvaliddatatype",children:(0,s.jsx)(e.code,{children:"IsValidDataType"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["\u8bf4\u660e\uff1a",(0,s.jsx)(e.code,{children:"IsValidDataType"})," \u68c0\u67e5\u7ed9\u5b9a\u7684 ",(0,s.jsx)(e.code,{children:"dataType"})," \u662f\u5426\u662f\u53ef\u4ee5\u7528\u4e8e\u52a0\u8f7d\u7684\u6709\u6548\u6570\u636e\u5185\u5bb9\u3002"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"\u683c\u5f0f\uff1a"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"func IsValidDataType(dataType string) bool\n"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"\u793a\u4f8b\uff1a"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'func ExampleIsValidDataType() {\n  \tfmt.Println(gjson.IsValidDataType("json"))\n  \tfmt.Println(gjson.IsValidDataType("yml"))\n  \tfmt.Println(gjson.IsValidDataType("js"))\n  \tfmt.Println(gjson.IsValidDataType("mp4"))\n  \tfmt.Println(gjson.IsValidDataType("xsl"))\n  \tfmt.Println(gjson.IsValidDataType("txt"))\n  \tfmt.Println(gjson.IsValidDataType(""))\n  \tfmt.Println(gjson.IsValidDataType(".json"))\n\n  \t// Output:\n  \t// true\n  \t// true\n  \t// true\n  \t// false\n  \t// false\n  \t// false\n  \t// false\n  \t// true\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"valid",children:(0,s.jsx)(e.code,{children:"Valid"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["\u8bf4\u660e\uff1a",(0,s.jsx)(e.code,{children:"Valid"})," \u68c0\u67e5 ",(0,s.jsx)(e.code,{children:"data"})," \u662f\u5426\u4e3a\u6709\u6548\u7684 ",(0,s.jsx)(e.code,{children:"JSON"})," \u6570\u636e\u7c7b\u578b\u3002 \u53c2\u6570 ",(0,s.jsx)(e.code,{children:"data"})," \u6307\u5b9a ",(0,s.jsx)(e.code,{children:"JSON"})," \u683c\u5f0f\u6570\u636e\uff0c\u53ef\u4ee5\u662f ",(0,s.jsx)(e.code,{children:"bytes"})," \u6216 ",(0,s.jsx)(e.code,{children:"string"})," \u7c7b\u578b\u3002"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"\u683c\u5f0f\uff1a"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"func Valid(data interface{}) bool\n"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"\u793a\u4f8b\uff1a"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'func ExampleValid() {\n  \tdata1 := []byte(`{"n":123456789, "m":{"k":"v"}, "a":[1,2,3]}`)\n  \tdata2 := []byte(`{"n":123456789, "m":{"k":"v"}, "a":[1,2,3]`)\n  \tfmt.Println(gjson.Valid(data1))\n  \tfmt.Println(gjson.Valid(data2))\n\n  \t// Output:\n  \t// true\n  \t// false\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"marshal",children:"Marshal"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["\u8bf4\u660e\uff1a",(0,s.jsx)(e.code,{children:"Marshal"})," \u662f ",(0,s.jsx)(e.code,{children:"Encode"})," \u7684\u522b\u540d\u3002"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"\u683c\u5f0f\uff1a"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"func Marshal(v interface{}) (marshaledBytes []byte, err error)\n"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"\u793a\u4f8b\uff1a"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'func ExampleMarshal() {\n  \tdata := map[string]interface{}{\n  \t\t"name":  "john",\n  \t\t"score": 100,\n  \t}\n\n  \tjsonData, _ := gjson.Marshal(data)\n  \tfmt.Println(string(jsonData))\n\n  \ttype BaseInfo struct {\n  \t\tName string\n  \t\tAge  int\n  \t}\n\n  \tinfo := BaseInfo{\n  \t\tName: "Guo Qiang",\n  \t\tAge:  18,\n  \t}\n\n  \tinfoData, _ := gjson.Marshal(info)\n  \tfmt.Println(string(infoData))\n\n  \t// Output:\n  \t// {"name":"john","score":100}\n  \t// {"Name":"Guo Qiang","Age":18}\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"marshalindent",children:(0,s.jsx)(e.code,{children:"MarshalIndent"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["\u8bf4\u660e\uff1a",(0,s.jsx)(e.code,{children:"MarshalIndent"})," \u662f ",(0,s.jsx)(e.code,{children:"json.``MarshalIndent"})," \u7684\u522b\u540d \u3002"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"\u683c\u5f0f\uff1a"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"func MarshalIndent(v interface{}, prefix, indent string) (marshaledBytes []byte, err error)\n"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"\u793a\u4f8b\uff1a"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'func ExampleMarshalIndent() {\n  \ttype BaseInfo struct {\n  \t\tName string\n  \t\tAge  int\n  \t}\n\n  \tinfo := BaseInfo{\n  \t\tName: "John",\n  \t\tAge:  18,\n  \t}\n\n  \tinfoData, _ := gjson.MarshalIndent(info, "", "\\t")\n  \tfmt.Println(string(infoData))\n\n  \t// Output:\n  \t// {\n  \t//\t"Name": "John",\n  \t//\t"Age": 18\n  \t// }\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"unmarshal",children:"Unmarshal"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["\u8bf4\u660e\uff1a ",(0,s.jsx)(e.code,{children:"Unmarshal"})," \u662f ",(0,s.jsx)(e.code,{children:"DecodeTo"})," \u7684\u522b\u540d\u3002"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"\u683c\u5f0f\uff1a"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"func Unmarshal(data []byte, v interface{}) (err error)\n"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"\u793a\u4f8b\uff1a"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'func ExampleUnmarshal() {\n  \ttype BaseInfo struct {\n  \t\tName  string\n  \t\tScore int\n  \t}\n\n  \tvar info BaseInfo\n\n  \tjsonContent := "{\\"name\\":\\"john\\",\\"score\\":100}"\n  \tgjson.Unmarshal([]byte(jsonContent), &info)\n  \tfmt.Printf("%+v", info)\n\n  \t// Output:\n  \t// {Name:john Score:100}\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"encode",children:"Encode"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["\u8bf4\u660e\uff1a ",(0,s.jsx)(e.code,{children:"Encode"})," \u5c06\u4efb\u610f\u7c7b\u578b ",(0,s.jsx)(e.code,{children:"value"})," \u5e8f\u5217\u5316\u4e3a\u5185\u5bb9\u4e3a ",(0,s.jsx)(e.code,{children:"JSON"})," \u7684 ",(0,s.jsx)(e.code,{children:"byte"})," \u6570\u7ec4\u3002"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"\u683c\u5f0f\uff1a"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"func Encode(value interface{}) ([]byte, error)\n"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"\u793a\u4f8b\uff1a"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'func ExampleEncode() {\n  \ttype BaseInfo struct {\n  \t\tName string\n  \t\tAge  int\n  \t}\n\n  \tinfo := BaseInfo{\n  \t\tName: "John",\n  \t\tAge:  18,\n  \t}\n\n  \tinfoData, _ := gjson.Encode(info)\n  \tfmt.Println(string(infoData))\n\n  \t// Output:\n  \t// {"Name":"John","Age":18}\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"mustencode",children:(0,s.jsx)(e.code,{children:"MustEncode"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["\u8bf4\u660e\uff1a",(0,s.jsx)(e.code,{children:"MustEncode"})," \u6267\u884c ",(0,s.jsx)(e.code,{children:"Encode"})," \u64cd\u4f5c\uff0c\u4f46\u5982\u679c\u53d1\u751f\u4efb\u4f55\u9519\u8bef\uff0c\u5b83\u4f1a ",(0,s.jsx)(e.code,{children:"panic"}),"\u3002"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"\u683c\u5f0f\uff1a"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"func MustEncode(value interface{}) []byte\n"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"\u793a\u4f8b\uff1a"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'func ExampleMustEncode() {\n  \ttype BaseInfo struct {\n  \t\tName string\n  \t\tAge  int\n  \t}\n\n  \tinfo := BaseInfo{\n  \t\tName: "John",\n  \t\tAge:  18,\n  \t}\n\n  \tinfoData := gjson.MustEncode(info)\n  \tfmt.Println(string(infoData))\n\n  \t// Output:\n  \t// {"Name":"John","Age":18}\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"encodestring",children:(0,s.jsx)(e.code,{children:"EncodeString"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["\u8bf4\u660e\uff1a ",(0,s.jsx)(e.code,{children:"EncodeString"})," \u5c06\u4efb\u610f\u7c7b\u578b ",(0,s.jsx)(e.code,{children:"value"})," \u5e8f\u5217\u5316\u4e3a\u5185\u5bb9\u4e3a ",(0,s.jsx)(e.code,{children:"JSON"})," \u7684 ",(0,s.jsx)(e.code,{children:"string"})," \u3002"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"\u683c\u5f0f\uff1a"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"func EncodeString(value interface{}) (string, error)\n"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"\u793a\u4f8b\uff1a"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'func ExampleEncodeString() {\n  \ttype BaseInfo struct {\n  \t\tName string\n  \t\tAge  int\n  \t}\n\n  \tinfo := BaseInfo{\n  \t\tName: "John",\n  \t\tAge:  18,\n  \t}\n\n  \tinfoData, _ := gjson.EncodeString(info)\n  \tfmt.Println(infoData)\n\n  \t// Output:\n  \t// {"Name":"John","Age":18}\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"mustencodestring",children:(0,s.jsx)(e.code,{children:"MustEncodeString"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["\u8bf4\u660e\uff1a ",(0,s.jsx)(e.code,{children:"MustEncodeString"})," \u5c06\u4efb\u610f\u7c7b\u578b ",(0,s.jsx)(e.code,{children:"value"})," \u5e8f\u5217\u5316\u4e3a\u5185\u5bb9\u4e3a ",(0,s.jsx)(e.code,{children:"JSON"})," \u7684 ",(0,s.jsx)(e.code,{children:"string"}),"\uff0c\u4f46\u5982\u679c\u53d1\u751f\u4efb\u4f55\u9519\u8bef\uff0c\u5b83\u4f1a ",(0,s.jsx)(e.code,{children:"panic"}),"\u3002"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"\u683c\u5f0f\uff1a"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"func MustEncodeString(value interface{}) string\n"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"\u793a\u4f8b\uff1a"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'func ExampleMustEncodeString() {\n  \ttype BaseInfo struct {\n  \t\tName string\n  \t\tAge  int\n  \t}\n\n  \tinfo := BaseInfo{\n  \t\tName: "John",\n  \t\tAge:  18,\n  \t}\n\n  \tinfoData := gjson.MustEncodeString(info)\n  \tfmt.Println(infoData)\n\n  \t// Output:\n  \t// {"Name":"John","Age":18}\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"decode",children:(0,s.jsx)(e.code,{children:"Decode"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["\u8bf4\u660e\uff1a",(0,s.jsx)(e.code,{children:"Decode"})," \u5c06 ",(0,s.jsx)(e.code,{children:"JSON"})," \u683c\u5f0f\u7684\u5185\u5bb9 ",(0,s.jsx)(e.code,{children:"data"})," \u89e3\u7801\u4e3a ",(0,s.jsx)(e.code,{children:"interface{}"}),"\u3002 \u53c2\u6570 ",(0,s.jsx)(e.code,{children:"data"})," \u53ef\u4ee5\u662f ",(0,s.jsx)(e.code,{children:"[]byte"})," \u6216 ",(0,s.jsx)(e.code,{children:"string"}),"\u3002"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"\u683c\u5f0f\uff1a"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"func Decode(data interface{}, options ...Options) (interface{}, error)\n"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"\u793a\u4f8b\uff1a"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'func ExampleDecode() {\n  \tjsonContent := `{"name":"john","score":100}`\n  \tinfo, _ := gjson.Decode([]byte(jsonContent))\n  \tfmt.Println(info)\n\n  \t// Output:\n  \t// map[name:john score:100]\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"decodeto",children:"DecodeTo"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["\u8bf4\u660e\uff1a",(0,s.jsx)(e.code,{children:"DecodeTo"})," \u5c06 ",(0,s.jsx)(e.code,{children:"JSON"})," \u683c\u5f0f\u7684\u6570\u636e ",(0,s.jsx)(e.code,{children:"data"})," \u89e3\u7801\u5230\u6307\u5b9a\u7684 ",(0,s.jsx)(e.code,{children:"interface"})," \u7c7b\u578b\u7684\u53d8\u91cf ",(0,s.jsx)(e.code,{children:"v"})," \u4e2d\u3002\u53c2\u6570 ",(0,s.jsx)(e.code,{children:"data"})," \u53ef\u4ee5\u662f ",(0,s.jsx)(e.code,{children:"[]byte"})," \u6216 ",(0,s.jsx)(e.code,{children:"string"}),"\u3002\u53c2\u6570 ",(0,s.jsx)(e.code,{children:"v"})," \u5e94\u8be5\u662f\u6307\u9488\u7c7b\u578b\u3002"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"\u683c\u5f0f\uff1a"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"func DecodeTo(data interface{}, v interface{}, options ...Options) (err error)\n"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"\u793a\u4f8b\uff1a"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'func ExampleDecodeTo() {\n  \ttype BaseInfo struct {\n  \t\tName  string\n  \t\tScore int\n  \t}\n\n  \tvar info BaseInfo\n\n  \tjsonContent := "{\\"name\\":\\"john\\",\\"score\\":100}"\n  \tgjson.DecodeTo([]byte(jsonContent), &info)\n  \tfmt.Printf("%+v", info)\n\n  \t// Output:\n  \t// {Name:john Score:100}\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"decodetojson",children:(0,s.jsx)(e.code,{children:"DecodeToJson"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["\u8bf4\u660e\uff1a",(0,s.jsx)(e.code,{children:"DecodeToJson"})," \u5c06 ",(0,s.jsx)(e.code,{children:"JSON"})," \u683c\u5f0f\u7684\u6570\u636e ",(0,s.jsx)(e.code,{children:"data"})," \u7f16\u7801\u4e3a ",(0,s.jsx)(e.code,{children:"json"})," \u5bf9\u8c61\u3002\u53c2\u6570 ",(0,s.jsx)(e.code,{children:"data"})," \u53ef\u4ee5\u662f ",(0,s.jsx)(e.code,{children:"[]byte"})," \u6216 ",(0,s.jsx)(e.code,{children:"string"}),"\u3002"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"\u683c\u5f0f\uff1a"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"func DecodeToJson(data interface{}, options ...Options) (*Json, error)\n"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"\u793a\u4f8b\uff1a"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'func ExampleDecodeToJson() {\n  \tjsonContent := `{"name":"john","score":100}"`\n  \tj, _ := gjson.DecodeToJson([]byte(jsonContent))\n  \tfmt.Println(j.Map())\n\n  \t// May Output:\n  \t// map[name:john score:100]\n}\n\n\n'})}),"\n",(0,s.jsx)(e.h3,{id:"setsplitchar",children:(0,s.jsx)(e.code,{children:"SetSplitChar"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["\u8bf4\u660e\uff1a",(0,s.jsx)(e.code,{children:"SetSplitChar"})," \u8bbe\u7f6e\u6570\u636e\u8bbf\u95ee\u7684\u5c42\u7ea7\u5206\u9694\u7b26\u3002"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"\u683c\u5f0f\uff1a"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"func (j *Json) SetSplitChar(char byte)\n"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"\u793a\u4f8b\uff1a"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'func ExampleJson_SetSplitChar() {\n  \tdata :=\n  \t\t`{\n          "users" : {\n              "count" : 2,\n              "list"  : [\n                  {"name" : "Ming",  "score" : 60},\n                  {"name" : "John", "score" : 99.5}\n              ]\n          }\n      }`\n  \tif j, err := gjson.DecodeToJson(data); err != nil {\n  \t\tpanic(err)\n  \t} else {\n  \t\tj.SetSplitChar(\'#\')\n  \t\tfmt.Println("John Score:", j.Get("users#list#1#score").Float32())\n  \t}\n  \t// Output:\n  \t// John Score: 99.5\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"setviolencecheck",children:(0,s.jsx)(e.code,{children:"SetViolenceCheck"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["\u8bf4\u660e\uff1a ",(0,s.jsx)(e.code,{children:"SetViolenceCheck"})," \u542f\u7528/\u7981\u7528\u6570\u636e\u5c42\u7ea7\u8bbf\u95ee\u7684\u66b4\u529b\u68c0\u67e5\u3002"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"\u683c\u5f0f\uff1a"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"func (j *Json) SetViolenceCheck(enabled bool)\n"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"\u793a\u4f8b\uff1a"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'func ExampleJson_SetViolenceCheck() {\n  \tdata :=\n  \t\t`{\n          "users" : {\n              "count" : 100\n          },\n          "users.count" : 101\n      }`\n  \tif j, err := gjson.DecodeToJson(data); err != nil {\n  \t\tfmt.Println(err)\n  \t} else {\n  \t\tj.SetViolenceCheck(true)\n  \t\tfmt.Println("Users Count:", j.Get("users.count"))\n  \t}\n  \t// Output:\n  \t// Users Count: 101\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"tojson",children:(0,s.jsx)(e.code,{children:"ToJson"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["\u8bf4\u660e\uff1a ",(0,s.jsx)(e.code,{children:"ToJson"})," \u8fd4\u56de\u7c7b\u578b\u4e3a ",(0,s.jsx)(e.code,{children:"[]byte"})," \u7684 ",(0,s.jsx)(e.code,{children:"JSON"})," \u5185\u5bb9\u3002"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"\u683c\u5f0f\uff1a"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"func (j *Json) ToJson() ([]byte, error)\n"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"\u793a\u4f8b\uff1a"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'func ExampleJson_ToJson() {\n  \ttype BaseInfo struct {\n  \t\tName string\n  \t\tAge  int\n  \t}\n\n  \tinfo := BaseInfo{\n  \t\tName: "John",\n  \t\tAge:  18,\n  \t}\n\n  \tj := gjson.New(info)\n  \tjsonBytes, _ := j.ToJson()\n  \tfmt.Println(string(jsonBytes))\n\n  \t// Output:\n  \t// {"Age":18,"Name":"John"}\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"tojsonstring",children:(0,s.jsx)(e.code,{children:"ToJsonString"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["\u8bf4\u660e\uff1a ",(0,s.jsx)(e.code,{children:"ToJsonString"})," \u8fd4\u56de\u7c7b\u578b\u4e3a ",(0,s.jsx)(e.code,{children:"string"})," \u7684 ",(0,s.jsx)(e.code,{children:"JSON"})," \u5185\u5bb9\u3002"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"\u683c\u5f0f\uff1a"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"func (j *Json) ToJsonString() (string, error)\n"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"\u793a\u4f8b\uff1a"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'func ExampleJson_ToJsonString() {\n  \ttype BaseInfo struct {\n  \t\tName string\n  \t\tAge  int\n  \t}\n\n  \tinfo := BaseInfo{\n  \t\tName: "John",\n  \t\tAge:  18,\n  \t}\n\n  \tj := gjson.New(info)\n  \tjsonStr, _ := j.ToJsonString()\n  \tfmt.Println(jsonStr)\n\n  \t// Output:\n  \t// {"Age":18,"Name":"John"}\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"tojsonindent",children:"ToJsonIndent"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["\u8bf4\u660e\uff1a ",(0,s.jsx)(e.code,{children:"ToJsonIndent"})," \u8fd4\u56de\u7c7b\u578b\u4e3a ",(0,s.jsx)(e.code,{children:"[]byte"})," \u7684\u5e26\u7f29\u8fdb\u683c\u5f0f\u7684 ",(0,s.jsx)(e.code,{children:"JSON"})," \u5185\u5bb9\u3002"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"\u683c\u5f0f\uff1a"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"func (j *Json) ToJsonIndent() ([]byte, error)\n"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"\u793a\u4f8b\uff1a"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'func ExampleJson_ToJsonIndent() {\n  \ttype BaseInfo struct {\n  \t\tName string\n  \t\tAge  int\n  \t}\n\n  \tinfo := BaseInfo{\n  \t\tName: "John",\n  \t\tAge:  18,\n  \t}\n\n  \tj := gjson.New(info)\n  \tjsonBytes, _ := j.ToJsonIndent()\n  \tfmt.Println(string(jsonBytes))\n\n  \t// Output:\n  \t//{\n  \t//\t"Age": 18,\n  \t//\t"Name": "John"\n  \t//}\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"tojsonindentstring",children:(0,s.jsx)(e.code,{children:"ToJsonIndentString"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["\u8bf4\u660e\uff1a ",(0,s.jsx)(e.code,{children:"ToJsonIndentString"})," \u8fd4\u56de\u7c7b\u578b\u4e3a ",(0,s.jsx)(e.code,{children:"string"})," \u7684\u5e26\u7f29\u8fdb\u683c\u5f0f\u7684 ",(0,s.jsx)(e.code,{children:"JSON"})," \u5185\u5bb9\u3002"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"\u683c\u5f0f\uff1a"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"func (j *Json) ToJsonIndentString() (string, error)\n"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"\u793a\u4f8b\uff1a"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'func ExampleJson_ToJsonIndentString() {\n  \ttype BaseInfo struct {\n  \t\tName string\n  \t\tAge  int\n  \t}\n\n  \tinfo := BaseInfo{\n  \t\tName: "John",\n  \t\tAge:  18,\n  \t}\n\n  \tj := gjson.New(info)\n  \tjsonStr, _ := j.ToJsonIndentString()\n  \tfmt.Println(jsonStr)\n\n  \t// Output:\n  \t//{\n  \t//\t"Age": 18,\n  \t//\t"Name": "John"\n  \t//}\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"musttojson",children:"MustToJson"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["\u8bf4\u660e\uff1a ",(0,s.jsx)(e.code,{children:"MustToJson"})," \u8fd4\u56de\u7c7b\u578b\u4e3a ",(0,s.jsx)(e.code,{children:"[]byte"})," \u7684 ",(0,s.jsx)(e.code,{children:"JSON"})," \u5185\u5bb9\uff0c\u5982\u679c\u53d1\u751f\u4efb\u4f55\u9519\u8bef\uff0c\u4f1a\u53d1\u751f ",(0,s.jsx)(e.code,{children:"panic"}),"\u3002"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"\u683c\u5f0f\uff1a"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"func (j *Json) MustToJson() []byte\n"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"\u793a\u4f8b\uff1a"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'func ExampleJson_MustToJson() {\n  \ttype BaseInfo struct {\n  \t\tName string\n  \t\tAge  int\n  \t}\n\n  \tinfo := BaseInfo{\n  \t\tName: "John",\n  \t\tAge:  18,\n  \t}\n\n  \tj := gjson.New(info)\n  \tjsonBytes := j.MustToJson()\n  \tfmt.Println(string(jsonBytes))\n\n  \t// Output:\n  \t// {"Age":18,"Name":"John"}\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"musttojsonstring",children:(0,s.jsx)(e.code,{children:"MustToJsonString"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["\u8bf4\u660e\uff1a ",(0,s.jsx)(e.code,{children:"MustToJsonString"})," \u8fd4\u56de\u7c7b\u578b\u4e3a ",(0,s.jsx)(e.code,{children:"string"})," \u7684 ",(0,s.jsx)(e.code,{children:"JSON"})," \u5185\u5bb9\uff0c\u5982\u679c\u53d1\u751f\u4efb\u4f55\u9519\u8bef\uff0c\u4f1a\u53d1\u751f ",(0,s.jsx)(e.code,{children:"panic"}),"\u3002"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"\u683c\u5f0f\uff1a"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"func (j *Json) MustToJsonString() string\n"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"\u793a\u4f8b\uff1a"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'func ExampleJson_MustToJsonString() {\n  \ttype BaseInfo struct {\n  \t\tName string\n  \t\tAge  int\n  \t}\n\n  \tinfo := BaseInfo{\n  \t\tName: "John",\n  \t\tAge:  18,\n  \t}\n\n  \tj := gjson.New(info)\n  \tjsonStr := j.MustToJsonString()\n  \tfmt.Println(jsonStr)\n\n  \t// Output:\n  \t// {"Age":18,"Name":"John"}\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"musttojsonindent",children:"MustToJsonIndent"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["\u8bf4\u660e\uff1a ",(0,s.jsx)(e.code,{children:"MustToJsonStringIndent"})," \u8fd4\u56de\u7c7b\u578b\u4e3a ",(0,s.jsx)(e.code,{children:"[]byte"})," \u7684\u5e26\u7f29\u8fdb\u683c\u5f0f\u7684 ",(0,s.jsx)(e.code,{children:"JSON"})," \u5185\u5bb9\uff0c\u5982\u679c\u53d1\u751f\u4efb\u4f55\u9519\u8bef\uff0c\u4f1a\u53d1\u751f ",(0,s.jsx)(e.code,{children:"panic"}),"\u3002"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"\u683c\u5f0f\uff1a"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"func (j *Json) MustToJsonIndent() []byte\n"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"\u793a\u4f8b\uff1a"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'func ExampleJson_MustToJsonIndent() {\n  \ttype BaseInfo struct {\n  \t\tName string\n  \t\tAge  int\n  \t}\n\n  \tinfo := BaseInfo{\n  \t\tName: "John",\n  \t\tAge:  18,\n  \t}\n\n  \tj := gjson.New(info)\n  \tjsonBytes := j.MustToJsonIndent()\n  \tfmt.Println(string(jsonBytes))\n\n  \t// Output:\n  \t//{\n  \t//\t"Age": 18,\n  \t//\t"Name": "John"\n  \t//}\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"musttojsonindentstring",children:(0,s.jsx)(e.code,{children:"MustToJsonIndentString"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["\u8bf4\u660e\uff1a ",(0,s.jsx)(e.code,{children:"MustToJsonStringIndent"})," \u8fd4\u56de\u7c7b\u578b\u4e3a ",(0,s.jsx)(e.code,{children:"string"})," \u7684\u5e26\u7f29\u8fdb\u683c\u5f0f\u7684 ",(0,s.jsx)(e.code,{children:"JSON"})," \u5185\u5bb9\uff0c\u5982\u679c\u53d1\u751f\u4efb\u4f55\u9519\u8bef\uff0c\u4f1a\u53d1\u751f ",(0,s.jsx)(e.code,{children:"panic"}),"\u3002"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"\u683c\u5f0f\uff1a"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"func (j *Json) MustToJsonIndentString() string\n"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"\u793a\u4f8b\uff1a"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'func ExampleJson_MustToJsonIndentString() {\n  \ttype BaseInfo struct {\n  \t\tName string\n  \t\tAge  int\n  \t}\n\n  \tinfo := BaseInfo{\n  \t\tName: "John",\n  \t\tAge:  18,\n  \t}\n\n  \tj := gjson.New(info)\n  \tjsonStr := j.MustToJsonIndentString()\n  \tfmt.Println(jsonStr)\n\n  \t// Output:\n  \t//{\n  \t//\t"Age": 18,\n  \t//\t"Name": "John"\n  \t//}\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"toxml",children:"ToXml"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["\u8bf4\u660e\uff1a ",(0,s.jsx)(e.code,{children:"ToXml"})," \u8fd4\u56de\u7c7b\u578b\u4e3a ",(0,s.jsx)(e.code,{children:"[]byte"})," \u683c\u5f0f\u4e3a ",(0,s.jsx)(e.code,{children:"XML"})," \u7684\u5185\u5bb9\u3002"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"\u683c\u5f0f\uff1a"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"func (j *Json) ToXml(rootTag ...string) ([]byte, error)\n"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"\u793a\u4f8b\uff1a"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'func ExampleJson_ToXml() {\n  \ttype BaseInfo struct {\n  \t\tName string\n  \t\tAge  int\n  \t}\n\n  \tinfo := BaseInfo{\n  \t\tName: "John",\n  \t\tAge:  18,\n  \t}\n\n  \tj := gjson.New(info)\n  \txmlBytes, _ := j.ToXml()\n  \tfmt.Println(string(xmlBytes))\n\n  \t// Output:\n  \t// <doc><Age>18</Age><Name>John</Name></doc>\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"toxmlstring",children:(0,s.jsx)(e.code,{children:"ToXmlString"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["\u8bf4\u660e\uff1a ",(0,s.jsx)(e.code,{children:"ToXmlString"})," \u8fd4\u56de\u7c7b\u578b\u4e3a ",(0,s.jsx)(e.code,{children:"string"})," \u683c\u5f0f\u4e3a ",(0,s.jsx)(e.code,{children:"XML"})," \u7684\u5185\u5bb9\u3002"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"\u683c\u5f0f\uff1a"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"func (j *Json) ToXmlString(rootTag ...string) (string, error)\n"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"\u793a\u4f8b\uff1a"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'func ExampleJson_ToXmlString() {\n  \ttype BaseInfo struct {\n  \t\tName string\n  \t\tAge  int\n  \t}\n\n  \tinfo := BaseInfo{\n  \t\tName: "John",\n  \t\tAge:  18,\n  \t}\n\n  \tj := gjson.New(info)\n  \txmlStr, _ := j.ToXmlString()\n  \tfmt.Println(string(xmlStr))\n\n  \t// Output:\n  \t// <doc><Age>18</Age><Name>John</Name></doc>\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"toxmlindent",children:"ToXmlIndent"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["\u8bf4\u660e\uff1a ",(0,s.jsx)(e.code,{children:"ToXmlIndent"})," \u8fd4\u56de\u7c7b\u578b\u4e3a ",(0,s.jsx)(e.code,{children:"[]byte"})," \u7684\u5e26\u7f29\u8fdb\u683c\u5f0f\u7684 ",(0,s.jsx)(e.code,{children:"XML"})," \u5185\u5bb9\u3002"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"\u683c\u5f0f\uff1a"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"func (j *Json) ToXmlIndent(rootTag ...string) ([]byte, error)\n"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"\u793a\u4f8b\uff1a"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'func ExampleJson_ToXmlIndent() {\n  \ttype BaseInfo struct {\n  \t\tName string\n  \t\tAge  int\n  \t}\n\n  \tinfo := BaseInfo{\n  \t\tName: "John",\n  \t\tAge:  18,\n  \t}\n\n  \tj := gjson.New(info)\n  \txmlBytes, _ := j.ToXmlIndent()\n  \tfmt.Println(string(xmlBytes))\n\n  \t// Output:\n  \t//<doc>\n  \t//\t<Age>18</Age>\n  \t//\t<Name>John</Name>\n  \t//</doc>\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"toxmlindentstring",children:(0,s.jsx)(e.code,{children:"ToXmlIndentString"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["\u8bf4\u660e\uff1a ",(0,s.jsx)(e.code,{children:"ToXmlIndentString"})," \u8fd4\u56de\u7c7b\u578b\u4e3a ",(0,s.jsx)(e.code,{children:"string"})," \u7684\u5e26\u7f29\u8fdb\u683c\u5f0f\u7684 ",(0,s.jsx)(e.code,{children:"XML"})," \u5185\u5bb9\u3002"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"\u683c\u5f0f\uff1a"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"func (j *Json) ToXmlIndentString(rootTag ...string) (string, error)\n"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"\u793a\u4f8b\uff1a"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'func ExampleJson_ToXmlIndentString() {\n  \ttype BaseInfo struct {\n  \t\tName string\n  \t\tAge  int\n  \t}\n\n  \tinfo := BaseInfo{\n  \t\tName: "John",\n  \t\tAge:  18,\n  \t}\n\n  \tj := gjson.New(info)\n  \txmlStr, _ := j.ToXmlIndentString()\n  \tfmt.Println(string(xmlStr))\n\n  \t// Output:\n  \t//<doc>\n  \t//\t<Age>18</Age>\n  \t//\t<Name>John</Name>\n  \t//</doc>\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"musttoxml",children:"MustToXml"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["\u8bf4\u660e\uff1a ",(0,s.jsx)(e.code,{children:"MustToXml"})," \u8fd4\u56de\u7c7b\u578b\u4e3a ",(0,s.jsx)(e.code,{children:"[]byte"})," \u683c\u5f0f\u4e3a ",(0,s.jsx)(e.code,{children:"XML"})," \u7684\u5185\u5bb9\u3002\u5982\u679c\u53d1\u751f\u4efb\u4f55\u9519\u8bef\uff0c\u4f1a\u53d1\u751f ",(0,s.jsx)(e.code,{children:"panic"}),"\u3002"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"\u683c\u5f0f\uff1a"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"func (j *Json) MustToXml(rootTag ...string) []byte\n"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"\u793a\u4f8b\uff1a"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'func ExampleJson_MustToXml() {\n  \ttype BaseInfo struct {\n  \t\tName string\n  \t\tAge  int\n  \t}\n\n  \tinfo := BaseInfo{\n  \t\tName: "John",\n  \t\tAge:  18,\n  \t}\n\n  \tj := gjson.New(info)\n  \txmlBytes := j.MustToXml()\n  \tfmt.Println(string(xmlBytes))\n\n  \t// Output:\n  \t// <doc><Age>18</Age><Name>John</Name></doc>\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"musttoxmlstring",children:(0,s.jsx)(e.code,{children:"MustToXmlString"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["\u8bf4\u660e\uff1a ",(0,s.jsx)(e.code,{children:"MustToXmlString"})," \u8fd4\u56de\u7c7b\u578b\u4e3a ",(0,s.jsx)(e.code,{children:"string"})," \u683c\u5f0f\u4e3a ",(0,s.jsx)(e.code,{children:"XML"})," \u7684\u5185\u5bb9\u3002\u5982\u679c\u53d1\u751f\u4efb\u4f55\u9519\u8bef\uff0c\u4f1a\u53d1\u751f ",(0,s.jsx)(e.code,{children:"panic"}),"\u3002"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"\u683c\u5f0f\uff1a"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"func (j *Json) MustToXmlString(rootTag ...string) string\n"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"\u793a\u4f8b\uff1a"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'func ExampleJson_MustToXmlString() {\n  \ttype BaseInfo struct {\n  \t\tName string\n  \t\tAge  int\n  \t}\n\n  \tinfo := BaseInfo{\n  \t\tName: "John",\n  \t\tAge:  18,\n  \t}\n\n  \tj := gjson.New(info)\n  \txmlStr := j.MustToXmlString()\n  \tfmt.Println(string(xmlStr))\n\n  \t// Output:\n  \t// <doc><Age>18</Age><Name>John</Name></doc>\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"musttoxmlindent",children:"MustToXmlIndent"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["\u8bf4\u660e\uff1a ",(0,s.jsx)(e.code,{children:"MustToXmlStringIndent"})," \u8fd4\u56de\u7c7b\u578b\u4e3a ",(0,s.jsx)(e.code,{children:"[]byte"})," \u5e26\u7f29\u8fdb\u683c\u5f0f\u7684 ",(0,s.jsx)(e.code,{children:"XML"})," \u5185\u5bb9\u3002\u5982\u679c\u53d1\u751f\u4efb\u4f55\u9519\u8bef\uff0c\u4f1a\u53d1\u751f ",(0,s.jsx)(e.code,{children:"panic"}),"\u3002"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"\u683c\u5f0f\uff1a"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"func (j *Json) MustToXmlIndent(rootTag ...string) []byte\n"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"\u793a\u4f8b\uff1a"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'func ExampleJson_MustToXmlIndent() {\n  \ttype BaseInfo struct {\n  \t\tName string\n  \t\tAge  int\n  \t}\n\n  \tinfo := BaseInfo{\n  \t\tName: "John",\n  \t\tAge:  18,\n  \t}\n\n  \tj := gjson.New(info)\n  \txmlBytes := j.MustToXmlIndent()\n  \tfmt.Println(string(xmlBytes))\n\n  \t// Output:\n  \t//<doc>\n  \t//\t<Age>18</Age>\n  \t//\t<Name>John</Name>\n  \t//</doc>\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"musttoxmlindentstring",children:(0,s.jsx)(e.code,{children:"MustToXmlIndentString"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["\u8bf4\u660e\uff1a ",(0,s.jsx)(e.code,{children:"MustToXmlStringIndentString"})," \u8fd4\u56de\u7c7b\u578b\u4e3a ",(0,s.jsx)(e.code,{children:"string"})," \u5e26\u7f29\u8fdb\u683c\u5f0f\u7684 ",(0,s.jsx)(e.code,{children:"XML"})," \u5185\u5bb9\u3002\u5982\u679c\u53d1\u751f\u4efb\u4f55\u9519\u8bef\uff0c\u4f1a\u53d1\u751f ",(0,s.jsx)(e.code,{children:"panic"}),"\u3002"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"\u683c\u5f0f\uff1a"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"func (j *Json) MustToXmlIndentString(rootTag ...string) string\n"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"\u793a\u4f8b\uff1a"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'func ExampleJson_MustToXmlIndentString() {\n  \ttype BaseInfo struct {\n  \t\tName string\n  \t\tAge  int\n  \t}\n\n  \tinfo := BaseInfo{\n  \t\tName: "John",\n  \t\tAge:  18,\n  \t}\n\n  \tj := gjson.New(info)\n  \txmlStr := j.MustToXmlIndentString()\n  \tfmt.Println(string(xmlStr))\n\n  \t// Output:\n  \t//<doc>\n  \t//\t<Age>18</Age>\n  \t//\t<Name>John</Name>\n  \t//</doc>\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"toyaml",children:"ToYaml"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["\u8bf4\u660e\uff1a ",(0,s.jsx)(e.code,{children:"ToYaml"})," \u8fd4\u56de\u7c7b\u578b\u4e3a ",(0,s.jsx)(e.code,{children:"[]byte"})," \u683c\u5f0f\u4e3a ",(0,s.jsx)(e.code,{children:"YAML"})," \u7684\u5185\u5bb9\u3002"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"\u683c\u5f0f\uff1a"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"func (j *Json) ToYaml() ([]byte, error)\n"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"\u793a\u4f8b\uff1a"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'func ExampleJson_ToYaml() {\n  \ttype BaseInfo struct {\n  \t\tName string\n  \t\tAge  int\n  \t}\n\n  \tinfo := BaseInfo{\n  \t\tName: "John",\n  \t\tAge:  18,\n  \t}\n\n  \tj := gjson.New(info)\n  \tYamlBytes, _ := j.ToYaml()\n  \tfmt.Println(string(YamlBytes))\n\n  \t// Output:\n  \t//Age: 18\n  \t//Name: John\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"toyamlindent",children:"ToYamlIndent"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["\u8bf4\u660e\uff1a ",(0,s.jsx)(e.code,{children:"ToYamlIndent"})," \u8fd4\u56de\u7c7b\u578b\u4e3a ",(0,s.jsx)(e.code,{children:"[]byte"})," \u5e26\u7f29\u8fdb\u683c\u5f0f\u7684 ",(0,s.jsx)(e.code,{children:"YAML"})," \u5185\u5bb9\u3002"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"\u683c\u5f0f\uff1a"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"func (j *Json) ToYamlIndent(indent string) ([]byte, error)\n"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"\u793a\u4f8b\uff1a"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'func ExampleJson_ToYamlIndent() {\n  \ttype BaseInfo struct {\n  \t\tName string\n  \t\tAge  int\n  \t}\n\n  \tinfo := BaseInfo{\n  \t\tName: "John",\n  \t\tAge:  18,\n  \t}\n\n  \tj := gjson.New(info)\n  \tYamlBytes, _ := j.ToYamlIndent("")\n  \tfmt.Println(string(YamlBytes))\n\n  \t// Output:\n  \t//Age: 18\n  \t//Name: John\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"toyamlstring",children:(0,s.jsx)(e.code,{children:"ToYamlString"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["\u8bf4\u660e\uff1a ",(0,s.jsx)(e.code,{children:"ToYamlString"})," \u8fd4\u56de\u7c7b\u578b\u4e3a ",(0,s.jsx)(e.code,{children:"string"})," \u683c\u5f0f\u4e3a ",(0,s.jsx)(e.code,{children:"YAML"})," \u7684\u5185\u5bb9\u3002"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"\u683c\u5f0f\uff1a"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"func (j *Json) ToYamlString() (string, error)\n"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"\u793a\u4f8b\uff1a"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'func ExampleJson_ToYamlString() {\n  \ttype BaseInfo struct {\n  \t\tName string\n  \t\tAge  int\n  \t}\n\n  \tinfo := BaseInfo{\n  \t\tName: "John",\n  \t\tAge:  18,\n  \t}\n\n  \tj := gjson.New(info)\n  \tYamlStr, _ := j.ToYamlString()\n  \tfmt.Println(string(YamlStr))\n\n  \t// Output:\n  \t//Age: 18\n  \t//Name: John\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"musttoyaml",children:(0,s.jsx)(e.code,{children:"MustToYaml"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["\u8bf4\u660e\uff1a ",(0,s.jsx)(e.code,{children:"MustToYaml"})," \u8fd4\u56de\u7c7b\u578b\u4e3a ",(0,s.jsx)(e.code,{children:"[]byte"})," \u683c\u5f0f\u4e3a ",(0,s.jsx)(e.code,{children:"YAML"})," \u7684\u5185\u5bb9\u3002\u5982\u679c\u53d1\u751f\u4efb\u4f55\u9519\u8bef\uff0c\u4f1a\u53d1\u751f ",(0,s.jsx)(e.code,{children:"panic"}),"\u3002"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"\u683c\u5f0f\uff1a"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"func (j *Json) MustToYaml() []byte\n"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"\u793a\u4f8b\uff1a"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'func ExampleJson_MustToYaml() {\n  \ttype BaseInfo struct {\n  \t\tName string\n  \t\tAge  int\n  \t}\n\n  \tinfo := BaseInfo{\n  \t\tName: "John",\n  \t\tAge:  18,\n  \t}\n\n  \tj := gjson.New(info)\n  \tYamlBytes := j.MustToYaml()\n  \tfmt.Println(string(YamlBytes))\n\n  \t// Output:\n  \t//Age: 18\n  \t//Name: John\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"musttoyamlstring",children:"MustToYamlString"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["\u8bf4\u660e\uff1a ",(0,s.jsx)(e.code,{children:"MustToYamlString"})," \u8fd4\u56de\u7c7b\u578b\u4e3a ",(0,s.jsx)(e.code,{children:"string"})," \u683c\u5f0f\u4e3a ",(0,s.jsx)(e.code,{children:"YAML"})," \u7684\u5185\u5bb9\u3002\u5982\u679c\u53d1\u751f\u4efb\u4f55\u9519\u8bef\uff0c\u4f1a\u53d1\u751f ",(0,s.jsx)(e.code,{children:"panic"}),"\u3002"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"\u683c\u5f0f\uff1a"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"func (j *Json) MustToYamlString() string\n"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"\u793a\u4f8b\uff1a"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'func ExampleJson_MustToYamlString() {\n  \ttype BaseInfo struct {\n  \t\tName string\n  \t\tAge  int\n  \t}\n\n  \tinfo := BaseInfo{\n  \t\tName: "John",\n  \t\tAge:  18,\n  \t}\n\n  \tj := gjson.New(info)\n  \tYamlStr := j.MustToYamlString()\n  \tfmt.Println(string(YamlStr))\n\n  \t// Output:\n  \t//Age: 18\n  \t//Name: John\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"totoml",children:(0,s.jsx)(e.code,{children:"ToToml"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["\u8bf4\u660e\uff1a ",(0,s.jsx)(e.code,{children:"ToToml"})," \u8fd4\u56de\u7c7b\u578b\u4e3a ",(0,s.jsx)(e.code,{children:"[]byte"})," \u683c\u5f0f\u4e3a ",(0,s.jsx)(e.code,{children:"TOML"})," \u7684\u5185\u5bb9\u3002"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"\u683c\u5f0f\uff1a"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"func (j *Json) ToToml() ([]byte, error)\n"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"\u793a\u4f8b\uff1a"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'func ExampleJson_ToToml() {\n  \ttype BaseInfo struct {\n  \t\tName string\n  \t\tAge  int\n  \t}\n\n  \tinfo := BaseInfo{\n  \t\tName: "John",\n  \t\tAge:  18,\n  \t}\n\n  \tj := gjson.New(info)\n  \tTomlBytes, _ := j.ToToml()\n  \tfmt.Println(string(TomlBytes))\n\n  \t// Output:\n  \t//Age = 18\n  \t//Name = "John"\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"totomlstring",children:"ToTomlString"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["\u8bf4\u660e\uff1a ",(0,s.jsx)(e.code,{children:"ToTomlString"})," \u8fd4\u56de\u7c7b\u578b\u4e3a ",(0,s.jsx)(e.code,{children:"string"})," \u683c\u5f0f\u4e3a ",(0,s.jsx)(e.code,{children:"TOML"})," \u7684\u5185\u5bb9\u3002"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"\u683c\u5f0f\uff1a"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"func (j *Json) ToTomlString() (string, error)\n"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"\u793a\u4f8b\uff1a"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'func ExampleJson_ToTomlString() {\n  \ttype BaseInfo struct {\n  \t\tName string\n  \t\tAge  int\n  \t}\n\n  \tinfo := BaseInfo{\n  \t\tName: "John",\n  \t\tAge:  18,\n  \t}\n\n  \tj := gjson.New(info)\n  \tTomlStr, _ := j.ToTomlString()\n  \tfmt.Println(string(TomlStr))\n\n  \t// Output:\n  \t//Age = 18\n  \t//Name = "John"\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"musttotoml",children:(0,s.jsx)(e.code,{children:"MustToToml"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["\u8bf4\u660e\uff1a ",(0,s.jsx)(e.code,{children:"MustToToml"})," \u8fd4\u56de\u7c7b\u578b\u4e3a ",(0,s.jsx)(e.code,{children:"[]byte"})," \u683c\u5f0f\u4e3a ",(0,s.jsx)(e.code,{children:"TOML"})," \u7684\u5185\u5bb9\u3002\u5982\u679c\u53d1\u751f\u4efb\u4f55\u9519\u8bef\uff0c\u4f1a\u53d1\u751f ",(0,s.jsx)(e.code,{children:"panic"}),"\u3002"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"\u683c\u5f0f\uff1a"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"func (j *Json) MustToToml() []byte\n"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"\u793a\u4f8b\uff1a"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'func ExampleJson_MustToToml() {\n  \ttype BaseInfo struct {\n  \t\tName string\n  \t\tAge  int\n  \t}\n\n  \tinfo := BaseInfo{\n  \t\tName: "John",\n  \t\tAge:  18,\n  \t}\n\n  \tj := gjson.New(info)\n  \tTomlBytes := j.MustToToml()\n  \tfmt.Println(string(TomlBytes))\n\n  \t// Output:\n  \t//Age = 18\n  \t//Name = "John"\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"musttotomlstring",children:"MustToTomlString"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["\u8bf4\u660e\uff1a ",(0,s.jsx)(e.code,{children:"MustToTomlString"})," \u8fd4\u56de\u7c7b\u578b\u4e3a ",(0,s.jsx)(e.code,{children:"string"})," \u683c\u5f0f\u4e3a ",(0,s.jsx)(e.code,{children:"TOML"})," \u7684\u5185\u5bb9\u3002\u5982\u679c\u53d1\u751f\u4efb\u4f55\u9519\u8bef\uff0c\u4f1a\u53d1\u751f ",(0,s.jsx)(e.code,{children:"panic"}),"\u3002"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"\u683c\u5f0f\uff1a"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"func (j *Json) MustToTomlString() string\n"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"\u793a\u4f8b\uff1a"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'func ExampleJson_MustToTomlString() {\n  \ttype BaseInfo struct {\n  \t\tName string\n  \t\tAge  int\n  \t}\n\n  \tinfo := BaseInfo{\n  \t\tName: "John",\n  \t\tAge:  18,\n  \t}\n\n  \tj := gjson.New(info)\n  \tTomlStr := j.MustToTomlString()\n  \tfmt.Println(string(TomlStr))\n\n  \t// Output:\n  \t//Age = 18\n  \t//Name = "John"\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"toini",children:(0,s.jsx)(e.code,{children:"ToIni"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["\u8bf4\u660e\uff1a ",(0,s.jsx)(e.code,{children:"ToIni"})," \u8fd4\u56de\u7c7b\u578b\u4e3a ",(0,s.jsx)(e.code,{children:"[]byte"})," \u683c\u5f0f\u4e3a ",(0,s.jsx)(e.code,{children:"INI"})," \u7684\u5185\u5bb9\u3002"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"\u683c\u5f0f\uff1a"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"func (j *Json) ToIni() ([]byte, error)\n"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"\u793a\u4f8b\uff1a"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'func ExampleJson_ToIni() {\n  \ttype BaseInfo struct {\n  \t\tName string\n  \t\tAge  int\n  \t}\n\n  \tinfo := BaseInfo{\n  \t\tName: "John",\n  \t\tAge:  18,\n  \t}\n\n  \tj := gjson.New(info)\n  \tIniBytes, _ := j.ToIni()\n  \tfmt.Println(string(IniBytes))\n\n  \t// May Output:\n  \t//Name=John\n  \t//Age=18\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"toinistring",children:"ToIniString"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["\u8bf4\u660e\uff1a ",(0,s.jsx)(e.code,{children:"ToIniString"})," \u8fd4\u56de\u7c7b\u578b\u4e3a ",(0,s.jsx)(e.code,{children:"string"})," \u683c\u5f0f\u4e3a ",(0,s.jsx)(e.code,{children:"INI"})," \u7684\u5185\u5bb9\u3002"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"\u683c\u5f0f\uff1a"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"func (j *Json) ToIniString() (string, error)\n"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"\u793a\u4f8b\uff1a"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'func ExampleJson_ToIniString() {\n  \ttype BaseInfo struct {\n  \t\tName string\n  \t}\n\n  \tinfo := BaseInfo{\n  \t\tName: "John",\n  \t}\n\n  \tj := gjson.New(info)\n  \tIniStr, _ := j.ToIniString()\n  \tfmt.Println(string(IniStr))\n\n  \t// Output:\n  \t//Name=John\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"musttoini",children:(0,s.jsx)(e.code,{children:"MustToIni"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["\u8bf4\u660e\uff1a ",(0,s.jsx)(e.code,{children:"MustToIni"})," \u8fd4\u56de\u7c7b\u578b\u4e3a ",(0,s.jsx)(e.code,{children:"[]byte"})," \u683c\u5f0f\u4e3a ",(0,s.jsx)(e.code,{children:"INI"})," \u7684\u5185\u5bb9\u3002\u5982\u679c\u53d1\u751f\u4efb\u4f55\u9519\u8bef\uff0c\u4f1a\u53d1\u751f ",(0,s.jsx)(e.code,{children:"panic"}),"\u3002"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"\u683c\u5f0f\uff1a"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"func (j *Json) MustToIni() []byte\n"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"\u793a\u4f8b\uff1a"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'func ExampleJson_MustToIni() {\n  \ttype BaseInfo struct {\n  \t\tName string\n  \t}\n\n  \tinfo := BaseInfo{\n  \t\tName: "John",\n  \t}\n\n  \tj := gjson.New(info)\n  \tIniBytes := j.MustToIni()\n  \tfmt.Println(string(IniBytes))\n\n  \t// Output:\n  \t//Name=John\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"musttoinistring",children:"MustToIniString"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["\u8bf4\u660e\uff1a ",(0,s.jsx)(e.code,{children:"MustToIniString"})," \u8fd4\u56de\u7c7b\u578b\u4e3a ",(0,s.jsx)(e.code,{children:"string"})," \u683c\u5f0f\u4e3a ",(0,s.jsx)(e.code,{children:"INI"})," \u7684\u5185\u5bb9\u3002\u5982\u679c\u53d1\u751f\u4efb\u4f55\u9519\u8bef\uff0c\u4f1a\u53d1\u751f ",(0,s.jsx)(e.code,{children:"panic"}),"\u3002"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"\u683c\u5f0f\uff1a"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"func (j *Json) MustToIniString() string\n"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"\u793a\u4f8b\uff1a"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'func ExampleJson_MustToIniString() {\n  \ttype BaseInfo struct {\n  \t\tName string\n  \t}\n\n  \tinfo := BaseInfo{\n  \t\tName: "John",\n  \t}\n\n  \tj := gjson.New(info)\n  \tIniStr := j.MustToIniString()\n  \tfmt.Println(string(IniStr))\n\n  \t// Output:\n  \t//Name=John\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"marshaljson",children:"MarshalJSON"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["\u8bf4\u660e\uff1a",(0,s.jsx)(e.code,{children:"MarshalJSON"})," \u5b9e\u73b0\u4e86 ",(0,s.jsx)(e.code,{children:"json.Marshal"})," \u7684\u63a5\u53e3 ",(0,s.jsx)(e.code,{children:"MarshalJSON"}),"\u3002"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"\u683c\u5f0f\uff1a"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"func (j Json) MarshalJSON() ([]byte, error)\n"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"\u793a\u4f8b\uff1a"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'func ExampleJson_MarshalJSON() {\n  \ttype BaseInfo struct {\n  \t\tName string\n  \t\tAge  int\n  \t}\n\n  \tinfo := BaseInfo{\n  \t\tName: "John",\n  \t\tAge:  18,\n  \t}\n\n  \tj := gjson.New(info)\n  \tjsonBytes, _ := j.MarshalJSON()\n  \tfmt.Println(string(jsonBytes))\n\n  \t// Output:\n  \t// {"Age":18,"Name":"John"}\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"unmarshaljson",children:"UnmarshalJSON"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["\u8bf4\u660e\uff1a ",(0,s.jsx)(e.code,{children:"UnmarshalJSON \u5b9e\u73b0\u4e86"})," ",(0,s.jsx)(e.code,{children:"json.Unmarshal \u7684\u63a5\u53e3"})," ",(0,s.jsx)(e.code,{children:"UnmarshalJSON"}),"\u3002"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"\u683c\u5f0f\uff1a"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"func (j *Json) UnmarshalJSON(b []byte) error\n"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"\u793a\u4f8b\uff1a"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'func ExampleJson_UnmarshalJSON() {\n  \tjsonStr := `{"Age":18,"Name":"John"}`\n\n  \tj := gjson.New("")\n  \tj.UnmarshalJSON([]byte(jsonStr))\n  \tfmt.Println(j.Map())\n\n  \t// Output:\n  \t// map[Age:18 Name:John]\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"unmarshalvalue",children:(0,s.jsx)(e.code,{children:"UnmarshalValue"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["\u8bf4\u660e\uff1a",(0,s.jsx)(e.code,{children:"UnmarshalValue"})," \u662f\u4e00\u4e2a\u4e3a ",(0,s.jsx)(e.code,{children:"Json"})," \u8bbe\u7f6e\u4efb\u4f55\u7c7b\u578b\u7684\u503c\u7684\u63a5\u53e3\u5b9e\u73b0\u3002"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"\u683c\u5f0f\uff1a"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"func (j *Json) UnmarshalValue(value interface{}) error\n"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"\u793a\u4f8b\uff1a"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'func ExampleJson_UnmarshalValue_Yaml() {\n  \tyamlContent :=\n  \t\t`base:\n    name: john\n    score: 100`\n\n  \tj := gjson.New("")\n  \tj.UnmarshalValue([]byte(yamlContent))\n  \tfmt.Println(j.Var().String())\n\n  \t// Output:\n  \t// {"base":{"name":"john","score":100}}\n}\n'})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'func ExampleJson_UnmarshalValue_Xml() {\n  \txmlStr := `<?xml version="1.0" encoding="UTF-8"?><doc><name>john</name><score>100</score></doc>`\n\n  \tj := gjson.New("")\n  \tj.UnmarshalValue([]byte(xmlStr))\n  \tfmt.Println(j.Var().String())\n\n  \t// Output:\n  \t// {"doc":{"name":"john","score":"100"}}\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"mapstrany",children:(0,s.jsx)(e.code,{children:"MapStrAny"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["\u8bf4\u660e\uff1a ",(0,s.jsx)(e.code,{children:"MapStrAny"})," \u5b9e\u73b0\u4e86\u63a5\u53e3\u65b9\u6cd5 ",(0,s.jsx)(e.code,{children:"MapStrAny()"}),"\u3002"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"\u683c\u5f0f\uff1a"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"func (j *Json) MapStrAny() map[string]interface{}\n"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"\u793a\u4f8b\uff1a"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'func ExampleJson_MapStrAny() {\n  \ttype BaseInfo struct {\n  \t\tName string\n  \t\tAge  int\n  \t}\n\n  \tinfo := BaseInfo{\n  \t\tName: "John",\n  \t\tAge:  18,\n  \t}\n\n  \tj := gjson.New(info)\n  \tfmt.Println(j.MapStrAny())\n\n  \t// Output:\n  \t// map[Age:18 Name:John]\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"interfaces",children:"Interfaces"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["\u8bf4\u660e\uff1a ",(0,s.jsx)(e.code,{children:"Interfaces"})," \u5b9e\u73b0\u4e86\u63a5\u53e3\u65b9\u6cd5 ",(0,s.jsx)(e.code,{children:"Interfaces()"}),"\u3002"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"\u683c\u5f0f\uff1a"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"func (j *Json) Interfaces() []interface{}\n"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"\u793a\u4f8b\uff1a"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'func ExampleJson_Interfaces() {\n  \ttype BaseInfo struct {\n  \t\tName string\n  \t\tAge  int\n  \t}\n\n  \tinfoList := []BaseInfo{\n  \t\tBaseInfo{\n  \t\t\tName: "John",\n  \t\t\tAge:  18,\n  \t\t},\n  \t\tBaseInfo{\n  \t\t\tName: "Tom",\n  \t\t\tAge:  20,\n  \t\t},\n  \t}\n\n  \tj := gjson.New(infoList)\n  \tfmt.Println(j.Interfaces())\n\n  \t// Output:\n  \t// [{John 18} {Tom 20}]\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"interface",children:(0,s.jsx)(e.code,{children:"Interface"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["\u8bf4\u660e\uff1a ",(0,s.jsx)(e.code,{children:"Interface"})," \u8fd4\u56de ",(0,s.jsx)(e.code,{children:"Json"})," \u5bf9\u8c61\u7684\u503c\u3002"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"\u683c\u5f0f\uff1a"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"func (j *Json) Interface() interface{}\n"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"\u793a\u4f8b\uff1a"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'func ExampleJson_Interface() {\n  \ttype BaseInfo struct {\n  \t\tName string\n  \t\tAge  int\n  \t}\n\n  \tinfo := BaseInfo{\n  \t\tName: "John",\n  \t\tAge:  18,\n  \t}\n\n  \tj := gjson.New(info)\n  \tfmt.Println(j.Interface())\n\n  \tvar nilJ *gjson.Json = nil\n  \tfmt.Println(nilJ.Interface())\n\n  \t// Output:\n  \t// map[Age:18 Name:John]\n  \t// <nil>\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"var",children:(0,s.jsx)(e.code,{children:"Var"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["\u8bf4\u660e\uff1a ",(0,s.jsx)(e.code,{children:"Var"})," \u8fd4\u56de\u7c7b\u578b\u4e3a ",(0,s.jsx)(e.code,{children:"*gvar.Var"})," \u7684 ",(0,s.jsx)(e.code,{children:"Json"})," \u5bf9\u8c61\u7684\u503c\u3002"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"\u683c\u5f0f\uff1a"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"func (j *Json) Var() *gvar.Var\n"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"\u793a\u4f8b\uff1a"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'func ExampleJson_Var() {\n  \ttype BaseInfo struct {\n  \t\tName string\n  \t\tAge  int\n  \t}\n\n  \tinfo := BaseInfo{\n  \t\tName: "John",\n  \t\tAge:  18,\n  \t}\n\n  \tj := gjson.New(info)\n  \tfmt.Println(j.Var().String())\n  \tfmt.Println(j.Var().Map())\n\n  \t// Output:\n  \t// {"Age":18,"Name":"John"}\n  \t// map[Age:18 Name:John]\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"isnil",children:"IsNil"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["\u8bf4\u660e\uff1a ",(0,s.jsx)(e.code,{children:"IsNil"})," \u68c0\u67e5Json\u5bf9\u8c61\u503c\u662f\u5426\u4e3a ",(0,s.jsx)(e.code,{children:"nil"}),"\u3002"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"\u683c\u5f0f\uff1a"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"func (j *Json) IsNil() bool\n"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"\u793a\u4f8b\uff1a"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'func ExampleJson_IsNil() {\n  \tdata1 := []byte(`{"n":123456789, "m":{"k":"v"}, "a":[1,2,3]}`)\n  \tdata2 := []byte(`{"n":123456789, "m":{"k":"v"}, "a":[1,2,3]`)\n\n  \tj1, _ := gjson.LoadContent(data1)\n  \tfmt.Println(j1.IsNil())\n\n  \tj2, _ := gjson.LoadContent(data2)\n  \tfmt.Println(j2.IsNil())\n\n  \t// Output:\n  \t// false\n  \t// true\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"get",children:(0,s.jsx)(e.code,{children:"Get"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["\u8bf4\u660e\uff1a",(0,s.jsx)(e.code,{children:"Get"})," \u6839\u636e\u6307\u5b9a\u7684 ",(0,s.jsx)(e.code,{children:"pattern"})," \u68c0\u7d22\u5e76\u8fd4\u56de\u503c\u3002\u5982\u679c ",(0,s.jsx)(e.code,{children:"pattern"})," \u7ed9\u7684\u662f ",(0,s.jsx)(e.code,{children:'"."'}),"\uff0c\u5c06\u8fd4\u56de\u5f53\u524d ",(0,s.jsx)(e.code,{children:"Json"})," \u5bf9\u8c61\u7684\u6240\u6709\u503c\u3002\u6ca1\u6709 ",(0,s.jsx)(e.code,{children:"pattern"})," \u6ca1\u6709\u627e\u5230\uff0c\u5219\u8fd4\u56de ",(0,s.jsx)(e.code,{children:"nil"}),"\u3002"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"\u683c\u5f0f\uff1a"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"func (j *Json) Get(pattern string, def ...interface{}) *gvar.Var\n"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"\u793a\u4f8b\uff1a"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'func ExampleJson_Get() {\n  \tdata :=\n  \t\t`{\n          "users" : {\n              "count" : 1,\n              "array" : ["John", "Ming"]\n          }\n      }`\n\n  \tj, _ := gjson.LoadContent(data)\n  \tfmt.Println(j.Get("."))\n  \tfmt.Println(j.Get("users"))\n  \tfmt.Println(j.Get("users.count"))\n  \tfmt.Println(j.Get("users.array"))\n\n  \tvar nilJ *gjson.Json = nil\n  \tfmt.Println(nilJ.Get("."))\n\n  \t// Output:\n  \t// {"users":{"array":["John","Ming"],"count":1}}\n  \t// {"array":["John","Ming"],"count":1}\n  \t// 1\n  \t// ["John","Ming"]\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"getjson",children:(0,s.jsx)(e.code,{children:"GetJson"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["\u8bf4\u660e\uff1a",(0,s.jsx)(e.code,{children:"GetJson"})," \u901a\u8fc7\u6307\u5b9a\u7684 ",(0,s.jsx)(e.code,{children:"pattern"})," \u83b7\u53d6\u503c\uff0c\u5e76\u5c06\u5176\u8f6c\u6362\u4e3a\u4e00\u4e2a\u975e\u5e76\u53d1\u5b89\u5168\u7684 ",(0,s.jsx)(e.code,{children:"Json"})," \u5bf9\u8c61\u3002"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"\u683c\u5f0f\uff1a"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"func (j *Json) GetJson(pattern string, def ...interface{}) *Json\n"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"\u793a\u4f8b\uff1a"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'func ExampleJson_GetJson() {\n  \tdata :=\n  \t\t`{\n          "users" : {\n              "count" : 1,\n              "array" : ["John", "Ming"]\n          }\n      }`\n\n  \tj, _ := gjson.LoadContent(data)\n\n  \tfmt.Println(j.GetJson("users.array").Array())\n\n  \t// Output:\n  \t// [John Ming]\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"getjsons",children:"GetJsons"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["\u8bf4\u660e\uff1a",(0,s.jsx)(e.code,{children:"GetJsons"})," \u901a\u8fc7\u6307\u5b9a\u7684 ",(0,s.jsx)(e.code,{children:"pattern"})," \u83b7\u53d6\u503c\uff0c\u5e76\u5c06\u5176\u8f6c\u6362\u4e3a\u4e00\u4e2a\u975e\u5e76\u53d1\u5b89\u5168\u7684 ",(0,s.jsx)(e.code,{children:"Json"})," \u5bf9\u8c61\u5207\u7247\u3002"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"\u683c\u5f0f\uff1a"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"func (j *Json) GetJsons(pattern string, def ...interface{}) []*Json\n"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"\u793a\u4f8b\uff1a"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'func ExampleJson_GetJsons() {\n  \tdata :=\n  \t\t`{\n          "users" : {\n              "count" : 3,\n              "array" : [{"Age":18,"Name":"John"}, {"Age":20,"Name":"Tom"}]\n          }\n      }`\n\n  \tj, _ := gjson.LoadContent(data)\n\n  \tjsons := j.GetJsons("users.array")\n  \tfor _, json := range jsons {\n  \t\tfmt.Println(json.Interface())\n  \t}\n\n  \t// Output:\n  \t// map[Age:18 Name:John]\n  \t// map[Age:20 Name:Tom]\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"getjsonmap",children:(0,s.jsx)(e.code,{children:"GetJsonMap"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["\u8bf4\u660e\uff1a",(0,s.jsx)(e.code,{children:"GetJsonMap"})," \u901a\u8fc7\u6307\u5b9a\u7684 ",(0,s.jsx)(e.code,{children:"pattern"})," \u83b7\u53d6\u503c\uff0c\u5e76\u5c06\u5176\u8f6c\u6362\u4e3a\u4e00\u4e2a\u975e\u5e76\u53d1\u5b89\u5168\u7684 ",(0,s.jsx)(e.code,{children:"Json"})," \u5bf9\u8c61\u7684 ",(0,s.jsx)(e.code,{children:"map"}),"\u3002"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"\u683c\u5f0f\uff1a"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"func (j *Json) GetJsonMap(pattern string, def ...interface{}) map[string]*Json\n"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"\u793a\u4f8b\uff1a"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'func ExampleJson_GetJsonMap() {\n  \tdata :=\n  \t\t`{\n          "users" : {\n              "count" : 1,\n  \t\t\t"array" : {\n  \t\t\t\t"info" : {"Age":18,"Name":"John"},\n  \t\t\t\t"addr" : {"City":"Chengdu","Company":"Tencent"}\n  \t\t\t}\n          }\n      }`\n\n  \tj, _ := gjson.LoadContent(data)\n\n  \tjsonMap := j.GetJsonMap("users.array")\n\n  \tfor _, json := range jsonMap {\n  \t\tfmt.Println(json.Interface())\n  \t}\n\n  \t// May Output:\n  \t// map[City:Chengdu Company:Tencent]\n  \t// map[Age:18 Name:John]\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"set",children:(0,s.jsx)(e.code,{children:"Set"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["\u8bf4\u660e\uff1a",(0,s.jsx)(e.code,{children:"Set"})," \u8bbe\u7f6e\u6307\u5b9a ",(0,s.jsx)(e.code,{children:"pattern"})," \u7684\u503c\u3002 \u5b83\u9ed8\u8ba4\u652f\u6301\u901a\u8fc7\u5b57\u7b26 ",(0,s.jsx)(e.code,{children:"'.'"})," \u8fdb\u884c\u6570\u636e\u5c42\u7ea7\u8bbf\u95ee\u3002"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"\u683c\u5f0f\uff1a"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"func (j *Json) Set(pattern string, value interface{}) error\n"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"\u793a\u4f8b\uff1a"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'func ExampleJson_Set() {\n  \ttype BaseInfo struct {\n  \t\tName string\n  \t\tAge  int\n  \t}\n\n  \tinfo := BaseInfo{\n  \t\tName: "John",\n  \t\tAge:  18,\n  \t}\n\n  \tj := gjson.New(info)\n  \tj.Set("Addr", "ChengDu")\n  \tj.Set("Friends.0", "Tom")\n  \tfmt.Println(j.Var().String())\n\n  \t// Output:\n  \t// {"Addr":"ChengDu","Age":18,"Friends":["Tom"],"Name":"John"}\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"mustset",children:(0,s.jsx)(e.code,{children:"MustSet"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["\u8bf4\u660e\uff1a",(0,s.jsx)(e.code,{children:"MustSet"})," \u6267\u884c ",(0,s.jsx)(e.code,{children:"Set"}),"\uff0c\u4f46\u5982\u679c\u6709\u4efb\u4f55\u9519\u8bef\uff0c\u4f1a\u53d1\u751f ",(0,s.jsx)(e.code,{children:"panic"}),"\u3002"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"\u683c\u5f0f\uff1a"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"func (j *Json) MustSet(pattern string, value interface{})\n"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"\u793a\u4f8b\uff1a"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'func ExampleJson_MustSet() {\n  \ttype BaseInfo struct {\n  \t\tName string\n  \t\tAge  int\n  \t}\n\n  \tinfo := BaseInfo{\n  \t\tName: "John",\n  \t\tAge:  18,\n  \t}\n\n  \tj := gjson.New(info)\n  \tj.MustSet("Addr", "ChengDu")\n  \tfmt.Println(j.Var().String())\n\n  \t// Output:\n  \t// {"Addr":"ChengDu","Age":18,"Name":"John"}\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"remove",children:(0,s.jsx)(e.code,{children:"Remove"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["\u8bf4\u660e\uff1a ",(0,s.jsx)(e.code,{children:"Remove"})," \u5220\u9664\u6307\u5b9a ",(0,s.jsx)(e.code,{children:"pattern"})," \u7684\u503c\u3002 \u5b83\u9ed8\u8ba4\u652f\u6301\u901a\u8fc7\u5b57\u7b26 ",(0,s.jsx)(e.code,{children:"'.'"})," \u8fdb\u884c\u6570\u636e\u5c42\u7ea7\u8bbf\u95ee\u3002"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"\u683c\u5f0f\uff1a"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"func (j *Json) Remove(pattern string) error\n"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"\u793a\u4f8b\uff1a"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'func ExampleJson_Remove() {\n  \ttype BaseInfo struct {\n  \t\tName string\n  \t\tAge  int\n  \t}\n\n  \tinfo := BaseInfo{\n  \t\tName: "John",\n  \t\tAge:  18,\n  \t}\n\n  \tj := gjson.New(info)\n  \tj.Remove("Age")\n  \tfmt.Println(j.Var().String())\n\n  \t// Output:\n  \t// {"Name":"John"}\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"mustremove",children:"MustRemove"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["\u8bf4\u660e\uff1a",(0,s.jsx)(e.code,{children:"MustRemove"})," \u6267\u884c",(0,s.jsx)(e.code,{children:"Remove"}),"\uff0c\u4f46\u5982\u679c\u6709\u4efb\u4f55\u9519\u8bef\uff0c\u4f1a\u53d1\u751f ",(0,s.jsx)(e.code,{children:"panic"}),"\u3002"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"\u683c\u5f0f\uff1a"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"func (j *Json) MustRemove(pattern string)\n"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"\u793a\u4f8b\uff1a"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'func ExampleJson_MustRemove() {\n  \ttype BaseInfo struct {\n  \t\tName string\n  \t\tAge  int\n  \t}\n\n  \tinfo := BaseInfo{\n  \t\tName: "John",\n  \t\tAge:  18,\n  \t}\n\n  \tj := gjson.New(info)\n  \tj.MustRemove("Age")\n  \tfmt.Println(j.Var().String())\n\n  \t// Output:\n  \t// {"Name":"John"}\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"contains",children:(0,s.jsx)(e.code,{children:"Contains"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["\u8bf4\u660e\uff1a ",(0,s.jsx)(e.code,{children:"Contains"})," \u68c0\u67e5\u6307\u5b9a ",(0,s.jsx)(e.code,{children:"pattern"})," \u7684\u503c\u662f\u5426\u5b58\u5728\u3002"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"\u683c\u5f0f\uff1a"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"func (j *Json) Contains(pattern string) bool\n"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"\u793a\u4f8b\uff1a"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'func ExampleJson_Contains() {\n  \ttype BaseInfo struct {\n  \t\tName string\n  \t\tAge  int\n  \t}\n\n  \tinfo := BaseInfo{\n  \t\tName: "John",\n  \t\tAge:  18,\n  \t}\n\n  \tj := gjson.New(info)\n  \tfmt.Println(j.Contains("Age"))\n  \tfmt.Println(j.Contains("Addr"))\n\n  \t// Output:\n  \t// true\n  \t// false\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"len",children:"Len"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["\u8bf4\u660e\uff1a",(0,s.jsx)(e.code,{children:"Len"})," \u6839\u636e\u6307\u5b9a\u7684 ",(0,s.jsx)(e.code,{children:"pattern"})," \u8fd4\u56de \u503c\u7684\u957f\u5ea6/\u5927\u5c0f\u3002 ",(0,s.jsx)(e.code,{children:"pattern"})," \u7684\u503c\u5e94\u8be5\u662f ",(0,s.jsx)(e.code,{children:"slice"})," \u6216 ",(0,s.jsx)(e.code,{children:"map"})," \u7684\u7c7b\u578b\u3002 \u5982\u679c\u627e\u4e0d\u5230\u76ee\u6807\u503c\u6216\u7c7b\u578b\u65e0\u6548\uff0c\u5219\u8fd4\u56de ",(0,s.jsx)(e.code,{children:"-1"}),"\u3002"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"\u683c\u5f0f\uff1a"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"func (j *Json) Len(pattern string) int\n"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"\u793a\u4f8b\uff1a"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'func ExampleJson_Len() {\n  \tdata :=\n  \t\t`{\n          "users" : {\n              "count" : 1,\n  \t\t\t"nameArray" : ["Join", "Tom"],\n  \t\t\t"infoMap" : {\n  \t\t\t\t"name" : "Join",\n  \t\t\t\t"age" : 18,\n  \t\t\t\t"addr" : "ChengDu"\n  \t\t\t}\n          }\n      }`\n\n  \tj, _ := gjson.LoadContent(data)\n\n  \tfmt.Println(j.Len("users.nameArray"))\n  \tfmt.Println(j.Len("users.infoMap"))\n\n  \t// Output:\n  \t// 2\n  \t// 3\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"append",children:(0,s.jsx)(e.code,{children:"Append"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["\u8bf4\u660e\uff1a",(0,s.jsx)(e.code,{children:"Append"})," \u901a\u8fc7\u6307\u5b9a\u7684 ",(0,s.jsx)(e.code,{children:"pattern"})," \u5c06\u503c\u8ffd\u52a0\u5230 ",(0,s.jsx)(e.code,{children:"Json"})," \u5bf9\u8c61\u4e2d\u3002 ",(0,s.jsx)(e.code,{children:"pattern"})," \u7684\u503c\u7684\u7c7b\u578b\u5e94\u8be5\u662f ",(0,s.jsx)(e.code,{children:"slice"}),"\u3002"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"\u683c\u5f0f\uff1a"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"func (j *Json) Append(pattern string, value interface{}) error\n"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"\u793a\u4f8b\uff1a"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'func ExampleJson_Append() {\n  \tdata :=\n  \t\t`{\n          "users" : {\n              "count" : 1,\n              "array" : ["John", "Ming"]\n          }\n      }`\n\n  \tj, _ := gjson.LoadContent(data)\n\n  \tj.Append("users.array", "Lily")\n\n  \tfmt.Println(j.Get("users.array").Array())\n\n  \t// Output:\n  \t// [John Ming Lily]\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"mustappend",children:"MustAppend"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["\u8bf4\u660e\uff1a",(0,s.jsx)(e.code,{children:"MustAppend"})," \u6267\u884c ",(0,s.jsx)(e.code,{children:"Append"}),"\uff0c\u4f46\u5982\u679c\u6709\u4efb\u4f55\u9519\u8bef\uff0c\u4f1a\u53d1\u751f ",(0,s.jsx)(e.code,{children:"panic"}),"\u3002"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"\u683c\u5f0f\uff1a"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"func (j *Json) MustAppend(pattern string, value interface{})\n"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"\u793a\u4f8b\uff1a"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'func ExampleJson_MustAppend() {\n  \tdata :=\n  \t\t`{\n          "users" : {\n              "count" : 1,\n              "array" : ["John", "Ming"]\n          }\n      }`\n\n  \tj, _ := gjson.LoadContent(data)\n\n  \tj.MustAppend("users.array", "Lily")\n\n  \tfmt.Println(j.Get("users.array").Array())\n\n  \t// Output:\n  \t// [John Ming Lily]\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"map",children:"Map"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["\u8bf4\u660e\uff1a ",(0,s.jsx)(e.code,{children:"Map"})," \u5c06\u5f53\u524d ",(0,s.jsx)(e.code,{children:"Json"})," \u5bf9\u8c61\u8f6c\u6362\u4e3a ",(0,s.jsx)(e.code,{children:"map[string]interface{}"}),"\u3002 \u5982\u679c\u5931\u8d25\uff0c\u5219\u8fd4\u56de ",(0,s.jsx)(e.code,{children:"nil"}),"\u3002"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"\u683c\u5f0f\uff1a"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"func (j *Json) Map() map[string]interface{}\n"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"\u793a\u4f8b\uff1a"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'func ExampleJson_Map() {\n  \tdata :=\n  \t\t`{\n          "users" : {\n              "count" : 1,\n              "info" : {\n  \t\t\t\t"name" : "John",\n  \t\t\t\t"age" : 18,\n  \t\t\t\t"addr" : "ChengDu"\n  \t\t\t}\n          }\n      }`\n\n  \tj, _ := gjson.LoadContent(data)\n\n  \tfmt.Println(j.Get("users.info").Map())\n\n  \t// Output:\n  \t// map[addr:ChengDu age:18 name:John]\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"array",children:"Array"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["\u8bf4\u660e\uff1a",(0,s.jsx)(e.code,{children:"Array"})," \u5c06\u5f53\u524d ",(0,s.jsx)(e.code,{children:"Json"})," \u5bf9\u8c61\u8f6c\u6362\u4e3a ",(0,s.jsx)(e.code,{children:"[]interface{}"}),"\u3002\xa0\u5982\u679c\u5931\u8d25\uff0c\u5219\u8fd4\u56de ",(0,s.jsx)(e.code,{children:"nil"}),"\u3002"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"\u683c\u5f0f\uff1a"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"func (j *Json) Array() []interface{}\n"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"\u793a\u4f8b\uff1a"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'func ExampleJson_Array() {\n  \tdata :=\n  \t\t`{\n          "users" : {\n              "count" : 1,\n              "array" : ["John", "Ming"]\n          }\n      }`\n\n  \tj, _ := gjson.LoadContent(data)\n\n  \tfmt.Println(j.Get("users.array"))\n\n  \t// Output:\n  \t// ["John","Ming"]\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"scan",children:(0,s.jsx)(e.code,{children:"Scan"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["\u8bf4\u660e\uff1a ",(0,s.jsx)(e.code,{children:"Scan"})," \u81ea\u52a8\u8c03\u7528 ",(0,s.jsx)(e.code,{children:"Struct"})," \u6216 ",(0,s.jsx)(e.code,{children:"Structs"})," \u51fd\u6570\u6839\u636e\u53c2\u6570 ",(0,s.jsx)(e.code,{children:"pointer"})," \u7684\u7c7b\u578b\u6765\u8fdb\u884c\u8f6c\u6362\u3002"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"\u683c\u5f0f\uff1a"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"func (j *Json) Scan(pointer interface{}, mapping ...map[string]string) error\n"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"\u793a\u4f8b\uff1a"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'func ExampleJson_Scan() {\n  \tdata := `{"name":"john","age":"18"}`\n\n  \ttype BaseInfo struct {\n  \t\tName string\n  \t\tAge  int\n  \t}\n\n  \tinfo := BaseInfo{}\n\n  \tj, _ := gjson.LoadContent(data)\n  \tj.Scan(&info)\n\n  \tfmt.Println(info)\n\n  \t// May Output:\n  \t// {john 18}\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"dump",children:"Dump"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["\u8bf4\u660e\uff1a ",(0,s.jsx)(e.code,{children:"Dump"})," \u4ee5\u53ef\u8bfb\u6027\u66f4\u9ad8\u7684\u65b9\u5f0f\u6253\u5370 ",(0,s.jsx)(e.code,{children:"Json"})," \u5bf9\u8c61\u3002"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"\u683c\u5f0f\uff1a"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"func (j *Json) Dump()\n"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"\u793a\u4f8b\uff1a"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'func ExampleJson_Dump() {\n  \tdata := `{"name":"john","age":"18"}`\n\n  \tj, _ := gjson.LoadContent(data)\n  \tj.Dump()\n\n  \t// May Output:\n  \t//{\n  \t//\t"name": "john",\n  \t//\t"age":  "18",\n  \t//}\n}\n'})})]})}function h(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(j,{...n})}):j(n)}},28453:(n,e,t)=>{t.d(e,{R:()=>r,x:()=>d});var s=t(96540);const i={},l=s.createContext(i);function r(n){const e=s.useContext(l);return s.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function d(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:r(n.components),s.createElement(l.Provider,{value:e},n.children)}}}]);