"use strict";(self.webpackChunkgfdoc=self.webpackChunkgfdoc||[]).push([[44517],{57631:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>s,contentTitle:()=>c,default:()=>h,frontMatter:()=>l,metadata:()=>d,toc:()=>o});var t=r(74848),i=r(28453);const l={title:"\u6811\u5f62\u7c7b\u578b-\u65b9\u6cd5\u4ecb\u7ecd",sidebar_position:1},c=void 0,d={id:"\u7ec4\u4ef6\u5217\u8868/\u6570\u636e\u7ed3\u6784/\u6811\u5f62\u7c7b\u578b-gtree/\u6811\u5f62\u7c7b\u578b-\u65b9\u6cd5\u4ecb\u7ecd",title:"\u6811\u5f62\u7c7b\u578b-\u65b9\u6cd5\u4ecb\u7ecd",description:"\u4ee5\u4e0b\u5e38\u7528\u65b9\u6cd5\u5217\u8868\uff0c\u6587\u6863\u66f4\u65b0\u53ef\u80fd\u6ede\u540e\u4e8e\u4ee3\u7801\u65b0\u7279\u6027\uff0c\u66f4\u591a\u7684\u65b9\u6cd5\u53ca\u793a\u4f8b\u8bf7\u53c2\u8003\u4ee3\u7801\u6587\u6863\uff1a https://pkg.go.dev/github.com/gogf/gf/v2/container/gtree",source:"@site/docs/5-\u7ec4\u4ef6\u5217\u8868/0-\u6570\u636e\u7ed3\u6784/7-\u6811\u5f62\u7c7b\u578b-gtree/1-\u6811\u5f62\u7c7b\u578b-\u65b9\u6cd5\u4ecb\u7ecd.md",sourceDirName:"5-\u7ec4\u4ef6\u5217\u8868/0-\u6570\u636e\u7ed3\u6784/7-\u6811\u5f62\u7c7b\u578b-gtree",slug:"/\u7ec4\u4ef6\u5217\u8868/\u6570\u636e\u7ed3\u6784/\u6811\u5f62\u7c7b\u578b-gtree/\u6811\u5f62\u7c7b\u578b-\u65b9\u6cd5\u4ecb\u7ecd",permalink:"/gf-site/docs/\u7ec4\u4ef6\u5217\u8868/\u6570\u636e\u7ed3\u6784/\u6811\u5f62\u7c7b\u578b-gtree/\u6811\u5f62\u7c7b\u578b-\u65b9\u6cd5\u4ecb\u7ecd",draft:!1,unlisted:!1,editUrl:"https://github.com/gogf/gf-site/blob/main/docs/5-\u7ec4\u4ef6\u5217\u8868/0-\u6570\u636e\u7ed3\u6784/7-\u6811\u5f62\u7c7b\u578b-gtree/1-\u6811\u5f62\u7c7b\u578b-\u65b9\u6cd5\u4ecb\u7ecd.md",tags:[],version:"current",lastUpdatedBy:"John",lastUpdatedAt:172951756e4,sidebarPosition:1,frontMatter:{title:"\u6811\u5f62\u7c7b\u578b-\u65b9\u6cd5\u4ecb\u7ecd",sidebar_position:1},sidebar:"hiddenSidebar",previous:{title:"\u6811\u5f62\u7c7b\u578b-\u57fa\u672c\u4f7f\u7528",permalink:"/gf-site/docs/\u7ec4\u4ef6\u5217\u8868/\u6570\u636e\u7ed3\u6784/\u6811\u5f62\u7c7b\u578b-gtree/\u6811\u5f62\u7c7b\u578b-\u57fa\u672c\u4f7f\u7528"},next:{title:"\u5bf9\u8c61\u590d\u7528-gpool",permalink:"/gf-site/docs/\u7ec4\u4ef6\u5217\u8868/\u6570\u636e\u7ed3\u6784/\u5bf9\u8c61\u590d\u7528-gpool/"}},s={},o=[{value:"<code>NewBTree</code>",id:"newbtree",level:2},{value:"<code>NewBTreeFrom</code>",id:"newbtreefrom",level:2},{value:"<code>Clone</code>",id:"clone",level:2},{value:"<code>Set</code>",id:"set",level:2},{value:"<code>Sets</code>",id:"sets",level:2},{value:"<code>Get</code>",id:"get",level:2},{value:"<code>GetOrSet</code>",id:"getorset",level:2},{value:"<code>GetOrSetFunc</code>",id:"getorsetfunc",level:2},{value:"<code>GetOrSetFuncLock</code>",id:"getorsetfunclock",level:2},{value:"GetVar",id:"getvar",level:2},{value:"<code>GetVarOrSet</code>",id:"getvarorset",level:2},{value:"GetVarOrSetFunc",id:"getvarorsetfunc",level:2},{value:"<code>GetVarOrSetFuncLock</code>",id:"getvarorsetfunclock",level:2},{value:"<code>SetIfNotExist</code>",id:"setifnotexist",level:2},{value:"<code>SetIfNotExistFunc</code>",id:"setifnotexistfunc",level:2},{value:"<code>SetIfNotExistFuncLock</code>",id:"setifnotexistfunclock",level:2},{value:"<code>Contains</code>",id:"contains",level:2},{value:"<code>Remove</code>",id:"remove",level:2},{value:"<code>Removes</code>",id:"removes",level:2},{value:"IsEmpty",id:"isempty",level:2},{value:"<code>Size</code>",id:"size",level:2},{value:"<code>Keys</code>",id:"keys",level:2},{value:"<code>Values</code>",id:"values",level:2},{value:"<code>Map</code>",id:"map",level:2},{value:"<code>MapStrAny</code>",id:"mapstrany",level:2},{value:"<code>Clear</code>",id:"clear",level:2},{value:"<code>Replace</code>",id:"replace",level:2},{value:"<code>Height</code>",id:"height",level:2},{value:"<code>Left</code>",id:"left",level:2},{value:"<code>Right</code>",id:"right",level:2},{value:"<code>String</code>",id:"string",level:2},{value:"<code>Search</code>",id:"search",level:2},{value:"<code>Print</code>",id:"print",level:2},{value:"<code>Iterator</code>",id:"iterator",level:2},{value:"<code>IteratorFrom</code>",id:"iteratorfrom",level:2},{value:"<code>IteratorAsc</code>",id:"iteratorasc",level:2},{value:"<code>IteratorAscFrom</code>",id:"iteratorascfrom",level:2},{value:"<code>IteratorDesc</code>",id:"iteratordesc",level:2},{value:"<code>IteratorDescFrom</code>",id:"iteratordescfrom",level:2},{value:"<code>MarshalJson</code>",id:"marshaljson",level:2}];function a(e){const n={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["\u4ee5\u4e0b\u5e38\u7528\u65b9\u6cd5\u5217\u8868\uff0c\u6587\u6863\u66f4\u65b0\u53ef\u80fd\u6ede\u540e\u4e8e\u4ee3\u7801\u65b0\u7279\u6027\uff0c\u66f4\u591a\u7684\u65b9\u6cd5\u53ca\u793a\u4f8b\u8bf7\u53c2\u8003\u4ee3\u7801\u6587\u6863\uff1a ",(0,t.jsx)(n.a,{href:"https://pkg.go.dev/github.com/gogf/gf/v2/container/gtree",children:"https://pkg.go.dev/github.com/gogf/gf/v2/container/gtree"})]}),"\n",(0,t.jsx)(n.h2,{id:"newbtree",children:(0,t.jsx)(n.code,{children:"NewBTree"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["\u8bf4\u660e\uff1a ",(0,t.jsx)(n.code,{children:"NewBTree"})," \u4f7f\u7528 ",(0,t.jsx)(n.code,{children:"m"}),"(\u6700\u5927\u5b50\u8282\u70b9\u6570\u91cf)\u548c\u81ea\u5b9a\u4e49\u7684\u6bd4\u8f83\u65b9\u6cd5\u521b\u5efa ",(0,t.jsx)(n.code,{children:"BTree"}),"\u3002\u53c2\u6570 ",(0,t.jsx)(n.code,{children:"safe"})," \u7528\u4e8e\u6307\u5b9a\u662f\u5426\u4f7f\u7528\u5e76\u53d1\u5b89\u5168\u7684 ",(0,t.jsx)(n.code,{children:"tree"}),"\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4e3a ",(0,t.jsx)(n.code,{children:"false"}),"\u3002"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["\u6ce8\u610f\uff1a\u53c2\u6570 ",(0,t.jsx)(n.code,{children:"m"})," \u5fc5\u987b\u5927\u4e8e\u7b49\u4e8e ",(0,t.jsx)(n.code,{children:"3"}),"\uff0c\u5426\u5219\u4f1a ",(0,t.jsx)(n.code,{children:"panic"}),"\u3002"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"\u683c\u5f0f\uff1a"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"NewBTree(m int, comparator func(v1, v2 interface{}) int, safe ...bool) *BTree\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"\u793a\u4f8b\uff1a"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'func ExampleNewBTree() {\n  \tbTree := gtree.NewBTree(3, gutil.ComparatorString)\n  \tfor i := 0; i < 6; i++ {\n  \t\tbTree.Set("key"+gconv.String(i), "val"+gconv.String(i))\n  \t}\n  \tfmt.Println(bTree.Map())\n\n  \t// Output:\n  \t// map[key0:val0 key1:val1 key2:val2 key3:val3 key4:val4 key5:val5]\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"newbtreefrom",children:(0,t.jsx)(n.code,{children:"NewBTreeFrom"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["\u8bf4\u660e\uff1a ",(0,t.jsx)(n.code,{children:"NewBTreeFrom"})," \u4f7f\u7528 ",(0,t.jsx)(n.code,{children:"m"}),"(\u6700\u5927\u5b50\u8282\u70b9\u6570\u91cf)\uff0c\u81ea\u5b9a\u4e49\u7684\u6bd4\u8f83\u65b9\u6cd5\u548c\u7c7b\u578b\u4e3a ",(0,t.jsx)(n.code,{children:"map[interface{}]interface{}"})," \u7684 ",(0,t.jsx)(n.code,{children:"data"})," \u521b\u5efa ",(0,t.jsx)(n.code,{children:"BTree"}),"\u3002\u53c2\u6570 ",(0,t.jsx)(n.code,{children:"safe"})," \u7528\u4e8e\u6307\u5b9a\u662f\u5426\u4f7f\u7528\u5e76\u53d1\u5b89\u5168\u7684 ",(0,t.jsx)(n.code,{children:"tree"}),"\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4e3a ",(0,t.jsx)(n.code,{children:"false"}),"\u3002"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["\u6ce8\u610f\uff1a\u53c2\u6570 ",(0,t.jsx)(n.code,{children:"m"})," \u5fc5\u987b\u5927\u4e8e\u7b49\u4e8e ",(0,t.jsx)(n.code,{children:"3"}),"\uff0c\u5426\u5219\u4f1a ",(0,t.jsx)(n.code,{children:"panic"}),"\u3002"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"\u683c\u5f0f\uff1a"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"NewBTreeFrom(m int, comparator func(v1, v2 interface{}) int, data map[interface{}]interface{}, safe ...bool) *BTree\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"\u793a\u4f8b\uff1a"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'func ExampleNewBTreeFrom() {\n  \tbTree := gtree.NewBTree(3, gutil.ComparatorString)\n  \tfor i := 0; i < 6; i++ {\n  \t\tbTree.Set("key"+gconv.String(i), "val"+gconv.String(i))\n  \t}\n\n  \totherBTree := gtree.NewBTreeFrom(3, gutil.ComparatorString, bTree.Map())\n  \tfmt.Println(otherBTree.Map())\n\n  \t// Output:\n  \t// map[key0:val0 key1:val1 key2:val2 key3:val3 key4:val4 key5:val5]\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"clone",children:(0,t.jsx)(n.code,{children:"Clone"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["\u8bf4\u660e\uff1a ",(0,t.jsx)(n.code,{children:"clone"})," \u8fd4\u56de\u4e00\u4e2a\u503c\u4e3a\u5f53\u524d ",(0,t.jsx)(n.code,{children:"tree"})," \u503c\u7684\u526f\u672c\u7684\u65b0 ",(0,t.jsx)(n.code,{children:"BTree"}),"\u3002"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"\u683c\u5f0f\uff1a"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"Clone() *BTree\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"\u793a\u4f8b\uff1a"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'func ExampleBTree_Clone() {\n  \tb := gtree.NewBTree(3, gutil.ComparatorString)\n  \tfor i := 0; i < 6; i++ {\n  \t\tb.Set("key"+gconv.String(i), "val"+gconv.String(i))\n  \t}\n\n  \ttree := b.Clone()\n\n  \tfmt.Println(tree.Map())\n  \tfmt.Println(tree.Size())\n\n  \t// Output:\n  \t// map[key0:val0 key1:val1 key2:val2 key3:val3 key4:val4 key5:val5]\n  \t// 6\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"set",children:(0,t.jsx)(n.code,{children:"Set"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["\u8bf4\u660e\uff1a ",(0,t.jsx)(n.code,{children:"Set"})," \u4e3a ",(0,t.jsx)(n.code,{children:"tree"})," \u8bbe\u7f6e ",(0,t.jsx)(n.code,{children:"key/value"}),"\u3002"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"\u683c\u5f0f\uff1a"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"Set(key interface{}, value interface{})\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"\u793a\u4f8b\uff1a"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'func ExampleBTree_Set() {\n  \ttree := gtree.NewBTree(3, gutil.ComparatorString)\n  \tfor i := 0; i < 6; i++ {\n  \t\ttree.Set("key"+gconv.String(i), "val"+gconv.String(i))\n  \t}\n\n  \tfmt.Println(tree.Map())\n  \tfmt.Println(tree.Size())\n\n  \t// Output:\n  \t// map[key0:val0 key1:val1 key2:val2 key3:val3 key4:val4 key5:val5]\n  \t// 6\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"sets",children:(0,t.jsx)(n.code,{children:"Sets"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["\u8bf4\u660e\uff1a ",(0,t.jsx)(n.code,{children:"Sets"})," \u4e3a ",(0,t.jsx)(n.code,{children:"tree"})," \u6279\u91cf\u8bbe\u7f6e ",(0,t.jsx)(n.code,{children:"key/value"}),"\u3002"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"\u683c\u5f0f\uff1a"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"Sets(data map[interface{}]interface{})\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"\u793a\u4f8b\uff1a"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'func ExampleBTree_Sets() {\n  \ttree := gtree.NewBTree(3, gutil.ComparatorString)\n\n  \ttree.Sets(map[interface{}]interface{}{\n  \t\t"key1": "val1",\n  \t\t"key2": "val2",\n  \t})\n\n  \tfmt.Println(tree.Map())\n  \tfmt.Println(tree.Size())\n\n  \t// Output:\n  \t// map[key1:val1 key2:val2]\n  \t// 2\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"get",children:(0,t.jsx)(n.code,{children:"Get"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["\u8bf4\u660e\uff1a ",(0,t.jsx)(n.code,{children:"Get"})," \u8fd4\u56de\u53c2\u6570 ",(0,t.jsx)(n.code,{children:"key"})," \u5bf9\u5e94\u7684\u503c ",(0,t.jsx)(n.code,{children:"value"}),"\uff0c\u5982 ",(0,t.jsx)(n.code,{children:"key"})," \u4e0d\u5b58\u5728\uff0c\u5219\u8fd4\u56de ",(0,t.jsx)(n.code,{children:"Nil"}),"\u3002"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"\u683c\u5f0f\uff1a"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"Get(key interface{}) (value interface{})\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"\u793a\u4f8b\uff1a"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'func ExampleBTree_Get() {\n  \ttree := gtree.NewBTree(3, gutil.ComparatorString)\n  \tfor i := 0; i < 6; i++ {\n  \t\ttree.Set("key"+gconv.String(i), "val"+gconv.String(i))\n  \t}\n\n  \tfmt.Println(tree.Get("key1"))\n  \tfmt.Println(tree.Get("key10"))\n\n  \t// Output:\n  \t// val1\n  \t// <nil>\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"getorset",children:(0,t.jsx)(n.code,{children:"GetOrSet"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["\u8bf4\u660e\uff1a ",(0,t.jsx)(n.code,{children:"GetOrSet"})," \u5982 ",(0,t.jsx)(n.code,{children:"key"})," \u5b58\u5728\uff0c\u5219\u8fd4\u56de ",(0,t.jsx)(n.code,{children:"value"}),"\uff0c\u5982 ",(0,t.jsx)(n.code,{children:"key"})," \u4e0d\u5b58\u5728\uff0c\u4f7f\u7528 ",(0,t.jsx)(n.code,{children:"key"})," \u548c ",(0,t.jsx)(n.code,{children:"value"})," \u8bbe\u7f6e\u952e\u503c\uff0c\u7136\u540e\u8fd4\u56de\u8be5\u503c\u3002"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"\u683c\u5f0f\uff1a"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"GetOrSet(key interface{}, value interface{}) interface{}\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"\u793a\u4f8b\uff1a"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'func ExampleBTree_GetOrSet() {\n  \ttree := gtree.NewBTree(3, gutil.ComparatorString)\n  \tfor i := 0; i < 6; i++ {\n  \t\ttree.Set("key"+gconv.String(i), "val"+gconv.String(i))\n  \t}\n\n  \tfmt.Println(tree.GetOrSet("key1", "newVal1"))\n  \tfmt.Println(tree.GetOrSet("key6", "val6"))\n\n  \t// Output:\n  \t// val1\n  \t// val6\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"getorsetfunc",children:(0,t.jsx)(n.code,{children:"GetOrSetFunc"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["\u8bf4\u660e\uff1a ",(0,t.jsx)(n.code,{children:"GetOrSetFunc"})," \u5982 ",(0,t.jsx)(n.code,{children:"key"})," \u5b58\u5728\uff0c\u5219\u8fd4\u56de ",(0,t.jsx)(n.code,{children:"value"}),"\uff0c\u5982 ",(0,t.jsx)(n.code,{children:"key"})," \u4e0d\u5b58\u5728\uff0c\u4f7f\u7528 ",(0,t.jsx)(n.code,{children:"key"})," \u548c ",(0,t.jsx)(n.code,{children:"func f"})," \u7684\u8fd4\u56de\u503c\u8bbe\u7f6e\u952e\u503c\uff0c\u7136\u540e\u8fd4\u56de\u8be5\u503c\u3002"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"\u683c\u5f0f\uff1a"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"GetOrSetFunc(key interface{}, f func() interface{}) interface{}\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"\u793a\u4f8b\uff1a"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'func ExampleBTree_GetOrSetFunc() {\n  \ttree := gtree.NewBTree(3, gutil.ComparatorString)\n  \tfor i := 0; i < 6; i++ {\n  \t\ttree.Set("key"+gconv.String(i), "val"+gconv.String(i))\n  \t}\n\n  \tfmt.Println(tree.GetOrSetFunc("key1", func() interface{} {\n  \t\treturn "newVal1"\n  \t}))\n  \tfmt.Println(tree.GetOrSetFunc("key6", func() interface{} {\n  \t\treturn "val6"\n  \t}))\n\n  \t// Output:\n  \t// val1\n  \t// val6\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"getorsetfunclock",children:(0,t.jsx)(n.code,{children:"GetOrSetFuncLock"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["\u8bf4\u660e\uff1a ",(0,t.jsx)(n.code,{children:"GetOrSetFunc"})," \u5982 ",(0,t.jsx)(n.code,{children:"key"})," \u5b58\u5728\uff0c\u5219\u8fd4\u56de ",(0,t.jsx)(n.code,{children:"value"}),"\uff0c\u5982 ",(0,t.jsx)(n.code,{children:"key"})," \u4e0d\u5b58\u5728\uff0c\u4f7f\u7528 ",(0,t.jsx)(n.code,{children:"key"})," \u548c ",(0,t.jsx)(n.code,{children:"func f"})," \u7684\u8fd4\u56de\u503c\u8bbe\u7f6e\u952e\u503c\uff0c\u7136\u540e\u8fd4\u56de\u8be5\u503c\u3002"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["\u6ce8\u610f\uff1a ",(0,t.jsx)(n.code,{children:"GetOrSetFuncLock"})," \u4e0e ",(0,t.jsx)(n.code,{children:"GetOrSetFunc"})," \u51fd\u6570\u7684\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\u5b83\u5728\u5199\u9501\u4e2d\u6267\u884c\u51fd\u6570 ",(0,t.jsx)(n.code,{children:"f"}),"\u3002"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"\u683c\u5f0f\uff1a"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"GetOrSetFuncLock(key interface{}, f func() interface{}) interface{}\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"\u793a\u4f8b\uff1a"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'func ExampleBTree_GetOrSetFuncLock() {\n  \ttree := gtree.NewBTree(3, gutil.ComparatorString)\n  \tfor i := 0; i < 6; i++ {\n  \t\ttree.Set("key"+gconv.String(i), "val"+gconv.String(i))\n  \t}\n\n  \tfmt.Println(tree.GetOrSetFuncLock("key1", func() interface{} {\n  \t\treturn "newVal1"\n  \t}))\n  \tfmt.Println(tree.GetOrSetFuncLock("key6", func() interface{} {\n  \t\treturn "val6"\n  \t}))\n\n  \t// Output:\n  \t// val1\n  \t// val6\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"getvar",children:"GetVar"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["\u8bf4\u660e\uff1a ",(0,t.jsx)(n.code,{children:"GetVar"})," \u6839\u636e\u952e\u540d ",(0,t.jsx)(n.code,{children:"key"})," \u67e5\u8be2\u5e76\u8fd4\u56de\u5bf9\u5e94\u7684\u952e\u503c\uff0c\u7c7b\u578b\u4e3a ",(0,t.jsx)(n.code,{children:"*gvar.Var"}),"\u3002"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["\u6ce8\u610f\uff1a\u8fd4\u56de\u7684 ",(0,t.jsx)(n.code,{children:"gvar.Var"})," \u662f\u975e\u5e76\u53d1\u5b89\u5168\u7684\u3002"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"\u683c\u5f0f\uff1a"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"GetVar(key interface{}) *gvar.Var\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"\u793a\u4f8b\uff1a"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'func ExampleBTree_GetVar() {\n  \ttree := gtree.NewBTree(3, gutil.ComparatorString)\n  \tfor i := 0; i < 6; i++ {\n  \t\ttree.Set("key"+gconv.String(i), "val"+gconv.String(i))\n  \t}\n\n  \tfmt.Println(tree.GetVar("key1").String())\n\n  \t// Output:\n  \t// val1\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"getvarorset",children:(0,t.jsx)(n.code,{children:"GetVarOrSet"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["\u8bf4\u660e\uff1a ",(0,t.jsx)(n.code,{children:"GetVarOrSet"})," \u4f7f\u7528 ",(0,t.jsx)(n.code,{children:"GetOrSet"})," \u7684\u7ed3\u679c\u8fd4\u56de\uff0c\u7c7b\u578b\u4e3a ",(0,t.jsx)(n.code,{children:"*gvar.Var"}),"\u3002"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["\u6ce8\u610f\uff1a\u8fd4\u56de\u7684 ",(0,t.jsx)(n.code,{children:"gvar.Var"})," \u662f\u975e\u5e76\u53d1\u5b89\u5168\u7684\u3002"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"\u683c\u5f0f\uff1a"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"GetVarOrSet(key interface{}, value interface{}) *gvar.Var\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"\u793a\u4f8b\uff1a"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'func ExampleBTree_GetVarOrSet() {\n  \ttree := gtree.NewBTree(3, gutil.ComparatorString)\n  \tfor i := 0; i < 6; i++ {\n  \t\ttree.Set("key"+gconv.String(i), "val"+gconv.String(i))\n  \t}\n\n  \tfmt.Println(tree.GetVarOrSet("key1", "newVal1"))\n  \tfmt.Println(tree.GetVarOrSet("key6", "val6"))\n\n  \t// Output:\n  \t// val1\n  \t// val6\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"getvarorsetfunc",children:"GetVarOrSetFunc"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\u8bf4\u660e\uff1a ",(0,t.jsx)(n.code,{children:"GetVarOrSetFunc"})," \u4f7f\u7528 ",(0,t.jsx)(n.code,{children:"GetOrSetFunc"})," \u7684\u7ed3\u679c\u8fd4\u56de\uff0c\u7c7b\u578b\u4e3a ",(0,t.jsx)(n.code,{children:"*gvar.Var"}),"\u3002"]}),"\n",(0,t.jsxs)(n.li,{children:["\u6ce8\u610f\uff1a\u8fd4\u56de\u7684 ",(0,t.jsx)(n.code,{children:"gvar.Var"})," \u662f\u975e\u5e76\u53d1\u5b89\u5168\u7684\u3002"]}),"\n",(0,t.jsx)(n.li,{children:"\u683c\u5f0f\uff1a"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"GetVarOrSetFunc(key interface{}, f func() interface{}) *gvar.Var\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"\u793a\u4f8b\uff1a"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'func ExampleBTree_GetVarOrSetFunc() {\n  \ttree := gtree.NewBTree(3, gutil.ComparatorString)\n  \tfor i := 0; i < 6; i++ {\n  \t\ttree.Set("key"+gconv.String(i), "val"+gconv.String(i))\n  \t}\n\n  \tfmt.Println(tree.GetVarOrSetFunc("key1", func() interface{} {\n  \t\treturn "newVal1"\n  \t}))\n  \tfmt.Println(tree.GetVarOrSetFunc("key6", func() interface{} {\n  \t\treturn "val6"\n  \t}))\n\n  \t// Output:\n  \t// val1\n  \t// val6\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"getvarorsetfunclock",children:(0,t.jsx)(n.code,{children:"GetVarOrSetFuncLock"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["\u8bf4\u660e\uff1a ",(0,t.jsx)(n.code,{children:"GetVarOrSetFuncLock"})," \u4f7f\u7528 ",(0,t.jsx)(n.code,{children:"GetOrSetFuncLock"})," \u7684\u7ed3\u679c\u8fd4\u56de\uff0c\u7c7b\u578b\u4e3a ",(0,t.jsx)(n.code,{children:"*gvar.Var"}),"\u3002"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["\u6ce8\u610f\uff1a\u8fd4\u56de\u7684 ",(0,t.jsx)(n.code,{children:"gvar.Var"})," \u662f\u975e\u5e76\u53d1\u5b89\u5168\u7684\u3002"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"\u683c\u5f0f\uff1a"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"GetVarOrSetFuncLock(key interface{}, f func() interface{}) *gvar.Var\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"\u793a\u4f8b\uff1a"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'func ExampleBTree_GetVarOrSetFuncLock() {\n  \ttree := gtree.NewBTree(3, gutil.ComparatorString)\n  \tfor i := 0; i < 6; i++ {\n  \t\ttree.Set("key"+gconv.String(i), "val"+gconv.String(i))\n  \t}\n\n  \tfmt.Println(tree.GetVarOrSetFuncLock("key1", func() interface{} {\n  \t\treturn "newVal1"\n  \t}))\n  \tfmt.Println(tree.GetVarOrSetFuncLock("key6", func() interface{} {\n  \t\treturn "val6"\n  \t}))\n\n  \t// Output:\n  \t// val1\n  \t// val6\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"setifnotexist",children:(0,t.jsx)(n.code,{children:"SetIfNotExist"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["\u8bf4\u660e\uff1a\u5982\u679c ",(0,t.jsx)(n.code,{children:"key"})," \u4e0d\u5b58\u5728\uff0c\u5219 ",(0,t.jsx)(n.code,{children:"SetIfNotExist"})," \u4e3a ",(0,t.jsx)(n.code,{children:"map"})," \u8bbe\u7f6e\u503c\u952e\u503c\u5bf9 ",(0,t.jsx)(n.code,{children:"key/value"}),"\uff0c\u5e76\u4e14\u8fd4\u56de ",(0,t.jsx)(n.code,{children:"true"}),"\u3002\u5982\u679c ",(0,t.jsx)(n.code,{children:"key"})," \u5b58\u5728\uff0c\u5219\u8fd4\u56de ",(0,t.jsx)(n.code,{children:"false"}),"\uff0c\u800c ",(0,t.jsx)(n.code,{children:"value"})," \u5c06\u88ab\u5ffd\u7565\u3002"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"\u683c\u5f0f\uff1a"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"SetIfNotExist(key interface{}, value interface{}) bool\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"\u793a\u4f8b\uff1a"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'func ExampleBTree_SetIfNotExist() {\n  \ttree := gtree.NewBTree(3, gutil.ComparatorString)\n  \tfor i := 0; i < 6; i++ {\n  \t\ttree.Set("key"+gconv.String(i), "val"+gconv.String(i))\n  \t}\n\n  \tfmt.Println(tree.SetIfNotExist("key1", "newVal1"))\n  \tfmt.Println(tree.SetIfNotExist("key6", "val6"))\n\n  \t// Output:\n  \t// false\n  \t// true\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"setifnotexistfunc",children:(0,t.jsx)(n.code,{children:"SetIfNotExistFunc"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["\u8bf4\u660e\uff1a\u5982\u679c ",(0,t.jsx)(n.code,{children:"key"})," \u4e0d\u5b58\u5728\uff0c\u5219 ",(0,t.jsx)(n.code,{children:"SetIfNotExistFunc"})," \u8bbe\u7f6e\u503c\u4e3a\u51fd\u6570 ",(0,t.jsx)(n.code,{children:"f"})," \u7684\u8fd4\u56de\u503c\uff0c\u5e76\u4e14\u8fd4\u56de ",(0,t.jsx)(n.code,{children:"true"}),"\u3002\u5982\u679c ",(0,t.jsx)(n.code,{children:"key"})," \u5b58\u5728\uff0c\u5219\u8fd4\u56de ",(0,t.jsx)(n.code,{children:"false"}),"\uff0c\u5e76\u4e14 ",(0,t.jsx)(n.code,{children:"value"})," \u5c06\u88ab\u5ffd\u7565\u3002"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"\u683c\u5f0f\uff1a"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"SetIfNotExistFunc(key interface{}, f func() interface{}) bool\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"\u793a\u4f8b\uff1a"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'func ExampleBTree_SetIfNotExistFunc() {\n  \ttree := gtree.NewBTree(3, gutil.ComparatorString)\n  \tfor i := 0; i < 6; i++ {\n  \t\ttree.Set("key"+gconv.String(i), "val"+gconv.String(i))\n  \t}\n\n  \tfmt.Println(tree.SetIfNotExistFunc("key1", func() interface{} {\n  \t\treturn "newVal1"\n  \t}))\n  \tfmt.Println(tree.SetIfNotExistFunc("key6", func() interface{} {\n  \t\treturn "val6"\n  \t}))\n\n  \t// Output:\n  \t// false\n  \t// true\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"setifnotexistfunclock",children:(0,t.jsx)(n.code,{children:"SetIfNotExistFuncLock"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["\u8bf4\u660e\uff1a\u5982\u679c ",(0,t.jsx)(n.code,{children:"key"})," \u4e0d\u5b58\u5728\uff0c\u5219 ",(0,t.jsx)(n.code,{children:"SetIfNotExistFunc"})," \u8bbe\u7f6e\u503c\u4e3a ",(0,t.jsx)(n.code,{children:"func c"})," \u7684\u8fd4\u56de\u503c\uff0c\u7136\u540e\u8fd4\u56de ",(0,t.jsx)(n.code,{children:"true"}),"\u3002\u5982\u679c ",(0,t.jsx)(n.code,{children:"key"})," \u5b58\u5728\uff0c\u5219\u8fd4\u56de ",(0,t.jsx)(n.code,{children:"false"}),"\uff0c\u800c ",(0,t.jsx)(n.code,{children:"value"})," \u5c06\u88ab\u5ffd\u7565\u3002"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"SetIfNotExistFuncLock"})," \u4e0e ",(0,t.jsx)(n.code,{children:"SetIfNotExistFunc"})," \u51fd\u6570\u7684\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\u5b83\u5728 ",(0,t.jsx)(n.code,{children:"mutex.Lock"})," \u4e2d\u6267\u884c\u51fd\u6570 ",(0,t.jsx)(n.code,{children:"f"}),"\u3002"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"\u683c\u5f0f\uff1a"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"SetIfNotExistFuncLock(key interface{}, f func() interface{}) bool\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"\u793a\u4f8b\uff1a"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'func ExampleBTree_SetIfNotExistFuncLock() {\n  \ttree := gtree.NewBTree(3, gutil.ComparatorString)\n  \tfor i := 0; i < 6; i++ {\n  \t\ttree.Set("key"+gconv.String(i), "val"+gconv.String(i))\n  \t}\n\n  \tfmt.Println(tree.SetIfNotExistFuncLock("key1", func() interface{} {\n  \t\treturn "newVal1"\n  \t}))\n  \tfmt.Println(tree.SetIfNotExistFuncLock("key6", func() interface{} {\n  \t\treturn "val6"\n  \t}))\n\n  \t// Output:\n  \t// false\n  \t// true\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"contains",children:(0,t.jsx)(n.code,{children:"Contains"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["\u8bf4\u660e\uff1a ",(0,t.jsx)(n.code,{children:"Contains"})," \u68c0\u67e5 ",(0,t.jsx)(n.code,{children:"key"})," \u5728 ",(0,t.jsx)(n.code,{children:"tree"})," \u4e2d\u662f\u5426\u5b58\u5728\u3002\u5982\u679c ",(0,t.jsx)(n.code,{children:"key"})," \u5b58\u5728\uff0c\u5219\u8fd4\u56de ",(0,t.jsx)(n.code,{children:"true"}),"\uff0c\u5426\u5219\u8fd4\u56de ",(0,t.jsx)(n.code,{children:"false"}),"\u3002"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"\u683c\u5f0f\uff1a"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"Contains(key interface{}) bool\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"\u793a\u4f8b\uff1a"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'func ExampleBTree_Contains() {\n  \ttree := gtree.NewBTree(3, gutil.ComparatorString)\n  \tfor i := 0; i < 6; i++ {\n  \t\ttree.Set("key"+gconv.String(i), "val"+gconv.String(i))\n  \t}\n\n  \tfmt.Println(tree.Contains("key1"))\n  \tfmt.Println(tree.Contains("key6"))\n\n  \t// Output:\n  \t// true\n  \t// false\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"remove",children:(0,t.jsx)(n.code,{children:"Remove"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["\u8bf4\u660e\uff1a\u6309\u7ed9\u5b9a\u7684 ",(0,t.jsx)(n.code,{children:"key"})," \u4ece ",(0,t.jsx)(n.code,{children:"tree"})," \u4e2d\u5220\u9664 ",(0,t.jsx)(n.code,{children:"value"}),"\uff0c\u5e76\u8fd4\u56de\u6b64\u5220\u9664\u7684 ",(0,t.jsx)(n.code,{children:"value"}),"\u3002"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"\u683c\u5f0f\uff1a"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"Remove(key interface{}) (value interface{})\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"\u793a\u4f8b\uff1a"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'func ExampleBTree_Remove() {\n  \ttree := gtree.NewBTree(3, gutil.ComparatorString)\n  \tfor i := 0; i < 6; i++ {\n  \t\ttree.Set("key"+gconv.String(i), "val"+gconv.String(i))\n  \t}\n\n  \tfmt.Println(tree.Remove("key1"))\n  \tfmt.Println(tree.Remove("key6"))\n  \tfmt.Println(tree.Map())\n\n  \t// Output:\n  \t// val1\n  \t// <nil>\n  \t// map[key0:val0 key2:val2 key3:val3 key4:val4 key5:val5]\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"removes",children:(0,t.jsx)(n.code,{children:"Removes"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["\u8bf4\u660e\uff1a ",(0,t.jsx)(n.code,{children:"Removes"})," \u6309\u7ed9\u5b9a\u7684 ",(0,t.jsx)(n.code,{children:"key"})," \u6279\u91cf\u5220\u9664 ",(0,t.jsx)(n.code,{children:"tree"})," \u7684 ",(0,t.jsx)(n.code,{children:"value"}),"\u3002"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"\u683c\u5f0f\uff1a"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"Removes(keys []interface{})\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"\u793a\u4f8b\uff1a"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'func ExampleBTree_Removes() {\n  \ttree := gtree.NewBTree(3, gutil.ComparatorString)\n  \tfor i := 0; i < 6; i++ {\n  \t\ttree.Set("key"+gconv.String(i), "val"+gconv.String(i))\n  \t}\n\n  \tremoveKeys := make([]interface{}, 2)\n  \tremoveKeys = append(removeKeys, "key1")\n  \tremoveKeys = append(removeKeys, "key6")\n\n  \ttree.Removes(removeKeys)\n\n  \tfmt.Println(tree.Map())\n\n  \t// Output:\n  \t// map[key0:val0 key2:val2 key3:val3 key4:val4 key5:val5]\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"isempty",children:"IsEmpty"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["\u8bf4\u660e\uff1a ",(0,t.jsx)(n.code,{children:"IsEmpty"})," \u68c0\u67e5 ",(0,t.jsx)(n.code,{children:"tree"})," \u662f\u5426\u4e3a\u7a7a\u3002\u5982\u679c ",(0,t.jsx)(n.code,{children:"tree"})," \u4e3a\u7a7a\uff0c\u5219\u8fd4\u56de ",(0,t.jsx)(n.code,{children:"true"}),"\uff0c\u5426\u5219\u8fd4\u56de ",(0,t.jsx)(n.code,{children:"false"}),"\u3002"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"\u683c\u5f0f\uff1a"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"IsEmpty() bool\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"\u793a\u4f8b\uff1a"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'func ExampleBTree_IsEmpty() {\n  \ttree := gtree.NewBTree(3, gutil.ComparatorString)\n\n  \tfmt.Println(tree.IsEmpty())\n\n  \tfor i := 0; i < 6; i++ {\n  \t\ttree.Set("key"+gconv.String(i), "val"+gconv.String(i))\n  \t}\n\n  \tfmt.Println(tree.IsEmpty())\n\n  \t// Output:\n  \t// true\n  \t// false\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"size",children:(0,t.jsx)(n.code,{children:"Size"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["\u8bf4\u660e\uff1a ",(0,t.jsx)(n.code,{children:"Size"})," \u8fd4\u56de ",(0,t.jsx)(n.code,{children:"tree"})," \u7684\u5927\u5c0f\u3002"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"\u683c\u5f0f\uff1a"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"Size() int\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"\u793a\u4f8b\uff1a"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'func ExampleBTree_Size() {\n  \ttree := gtree.NewBTree(3, gutil.ComparatorString)\n\n  \tfmt.Println(tree.Size())\n\n  \tfor i := 0; i < 6; i++ {\n  \t\ttree.Set("key"+gconv.String(i), "val"+gconv.String(i))\n  \t}\n\n  \tfmt.Println(tree.Size())\n\n  \t// Output:\n  \t// 0\n  \t// 6\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"keys",children:(0,t.jsx)(n.code,{children:"Keys"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["\u8bf4\u660e\uff1a ",(0,t.jsx)(n.code,{children:"Keys"})," \u6309\u5347\u5e8f\u8fd4\u56de\u6240\u6709\u7684 ",(0,t.jsx)(n.code,{children:"key"}),"\u3002"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"\u683c\u5f0f\uff1a"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"Keys() []interface{}\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"\u793a\u4f8b\uff1a"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'func ExampleBTree_Keys() {\n  \ttree := gtree.NewBTree(3, gutil.ComparatorString)\n  \tfor i := 6; i > 0; i-- {\n  \t\ttree.Set("key"+gconv.String(i), "val"+gconv.String(i))\n  \t}\n\n  \tfmt.Println(tree.Keys())\n\n  \t// Output:\n  \t// [key1 key2 key3 key4 key5 key6]\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"values",children:(0,t.jsx)(n.code,{children:"Values"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["\u8bf4\u660e\uff1a ",(0,t.jsx)(n.code,{children:"Values"})," \u6309 ",(0,t.jsx)(n.code,{children:"key"})," \u7684\u5347\u5e8f\u8fd4\u56de\u6240\u6709\u7684 ",(0,t.jsx)(n.code,{children:"value"}),"\u3002"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"\u683c\u5f0f\uff1a"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"Values() []interface{}\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"\u793a\u4f8b\uff1a"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'func ExampleBTree_Values() {\n  \ttree := gtree.NewBTree(3, gutil.ComparatorString)\n  \tfor i := 6; i > 0; i-- {\n  \t\ttree.Set("key"+gconv.String(i), "val"+gconv.String(i))\n  \t}\n\n  \tfmt.Println(tree.Values())\n\n  \t// Output:\n  \t// [val1 val2 val3 val4 val5 val6]\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"map",children:(0,t.jsx)(n.code,{children:"Map"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["\u8bf4\u660e\uff1a ",(0,t.jsx)(n.code,{children:"Map"})," \u4ee5 ",(0,t.jsx)(n.code,{children:"map"})," \u7684\u5f62\u5f0f\u8fd4\u56de\u6240\u6709\u7684 ",(0,t.jsx)(n.code,{children:"key/value"}),"\u3002"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"\u683c\u5f0f\uff1a"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"Map() map[interface{}]interface{}\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"\u793a\u4f8b\uff1a"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'func ExampleBTree_Map() {\n  \ttree := gtree.NewBTree(3, gutil.ComparatorString)\n  \tfor i := 0; i < 6; i++ {\n  \t\ttree.Set("key"+gconv.String(i), "val"+gconv.String(i))\n  \t}\n\n  \tfmt.Println(tree.Map())\n\n  \t// Output:\n  \t// map[key0:val0 key1:val1 key2:val2 key3:val3 key4:val4 key5:val5]\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"mapstrany",children:(0,t.jsx)(n.code,{children:"MapStrAny"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["\u8bf4\u660e\uff1a ",(0,t.jsx)(n.code,{children:"MapStrAny"})," \u4ee5 ",(0,t.jsx)(n.code,{children:"map[string]interface{}"})," \u7684\u5f62\u5f0f\u8fd4\u56de\u6240\u6709\u7684 ",(0,t.jsx)(n.code,{children:"key/value"}),"\u3002"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"\u683c\u5f0f\uff1a"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"MapStrAny() map[string]interface{}\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"\u793a\u4f8b\uff1a"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'func ExampleBTree_MapStrAny() {\n  \ttree := gtree.NewBTree(3, gutil.ComparatorString)\n  \tfor i := 0; i < 6; i++ {\n  \t\ttree.Set(1000+i, "val"+gconv.String(i))\n  \t}\n\n  \tfmt.Println(tree.MapStrAny())\n\n  \t// Output:\n  \t// map[1000:val0 1001:val1 1002:val2 1003:val3 1004:val4 1005:val5]\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"clear",children:(0,t.jsx)(n.code,{children:"Clear"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["\u8bf4\u660e\uff1a ",(0,t.jsx)(n.code,{children:"Clear"})," \u5220\u9664 ",(0,t.jsx)(n.code,{children:"tree"})," \u7684\u6240\u6709\u6570\u636e\u3002"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"\u683c\u5f0f\uff1a"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"Clear()\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"\u793a\u4f8b\uff1a"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'func ExampleBTree_Clear() {\n  \ttree := gtree.NewBTree(3, gutil.ComparatorString)\n  \tfor i := 0; i < 6; i++ {\n  \t\ttree.Set(1000+i, "val"+gconv.String(i))\n  \t}\n  \tfmt.Println(tree.Size())\n\n  \ttree.Clear()\n  \tfmt.Println(tree.Size())\n\n  \t// Output:\n  \t// 6\n  \t// 0\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"replace",children:(0,t.jsx)(n.code,{children:"Replace"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["\u8bf4\u660e\uff1a ",(0,t.jsx)(n.code,{children:"Replace"})," \u7528\u7c7b\u578b\u4e3a ",(0,t.jsx)(n.code,{children:"map[interface{}]interface{}"})," \u7684 ",(0,t.jsx)(n.code,{children:"data"})," \u66ff\u6362 ",(0,t.jsx)(n.code,{children:"tree"})," \u7684 ",(0,t.jsx)(n.code,{children:"key/value"}),"\u3002"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"\u683c\u5f0f\uff1a"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"Replace(data map[interface{}]interface{})\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"\u793a\u4f8b\uff1a"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'func ExampleBTree_Replace() {\n  \ttree := gtree.NewBTree(3, gutil.ComparatorString)\n  \tfor i := 0; i < 6; i++ {\n  \t\ttree.Set("key"+gconv.String(i), "val"+gconv.String(i))\n  \t}\n\n  \tfmt.Println(tree.Map())\n\n  \tdata := map[interface{}]interface{}{\n  \t\t"newKey0": "newVal0",\n  \t\t"newKey1": "newVal1",\n  \t\t"newKey2": "newVal2",\n  \t}\n\n  \ttree.Replace(data)\n\n  \tfmt.Println(tree.Map())\n\n  \t// Output:\n  \t// map[key0:val0 key1:val1 key2:val2 key3:val3 key4:val4 key5:val5]\n  \t// map[newKey0:newVal0 newKey1:newVal1 newKey2:newVal2]\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"height",children:(0,t.jsx)(n.code,{children:"Height"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["\u8bf4\u660e\uff1a ",(0,t.jsx)(n.code,{children:"Height"})," \u8fd4\u56de ",(0,t.jsx)(n.code,{children:"tree"})," \u7684\u9ad8\u5ea6\u3002"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"\u683c\u5f0f\uff1a"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"Height() int\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"\u793a\u4f8b\uff1a"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"func ExampleBTree_Height() {\n  \ttree := gtree.NewBTree(3, gutil.ComparatorInt)\n  \tfor i := 0; i < 100; i++ {\n  \t\ttree.Set(i, i)\n  \t}\n  \tfmt.Println(tree.Height())\n\n  \t// Output:\n  \t// 6\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"left",children:(0,t.jsx)(n.code,{children:"Left"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["\u8bf4\u660e\uff1a ",(0,t.jsx)(n.code,{children:"Left"})," \u8fd4\u56de\u6700\u5de6\u8fb9\uff08\u6700\u5c0f\uff09\u7684\u7c7b\u578b\u4e3a ",(0,t.jsx)(n.code,{children:"*BTreeEntry"})," \u7684 ",(0,t.jsx)(n.code,{children:"node"}),"\uff0c\u5982\u679c ",(0,t.jsx)(n.code,{children:"tree"})," \u662f\u7a7a\u7684\uff0c\u5219\u8fd4\u56de ",(0,t.jsx)(n.code,{children:"nil"}),"\u3002"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"\u683c\u5f0f\uff1a"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"Left() *BTreeEntry\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"\u793a\u4f8b\uff1a"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"func ExampleBTree_Left() {\n  \ttree := gtree.NewBTree(3, gutil.ComparatorInt)\n  \tfor i := 1; i < 100; i++ {\n  \t\ttree.Set(i, i)\n  \t}\n  \tfmt.Println(tree.Left().Key, tree.Left().Value)\n\n  \temptyTree := gtree.NewBTree(3, gutil.ComparatorInt)\n  \tfmt.Println(emptyTree.Left())\n\n  \t// Output:\n  \t// 1 1\n  \t// <nil>\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"right",children:(0,t.jsx)(n.code,{children:"Right"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["\u8bf4\u660e\uff1a ",(0,t.jsx)(n.code,{children:"Left"})," \u8fd4\u56de\u6700\u53f3\u8fb9\uff08\u6700\u5927\uff09\u7684\u7c7b\u578b\u4e3a ",(0,t.jsx)(n.code,{children:"*BTreeEntry"})," \u7684 ",(0,t.jsx)(n.code,{children:"node"}),"\uff0c\u5982\u679c ",(0,t.jsx)(n.code,{children:"tree"})," \u662f\u7a7a\u7684\uff0c\u5219\u8fd4\u56de ",(0,t.jsx)(n.code,{children:"nil"}),"\u3002"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"\u683c\u5f0f\uff1a"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"Right() *BTreeEntry\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"\u793a\u4f8b\uff1a"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"func ExampleBTree_Right() {\n  \ttree := gtree.NewBTree(3, gutil.ComparatorInt)\n  \tfor i := 1; i < 100; i++ {\n  \t\ttree.Set(i, i)\n  \t}\n  \tfmt.Println(tree.Right().Key, tree.Right().Value)\n\n  \temptyTree := gtree.NewBTree(3, gutil.ComparatorInt)\n  \tfmt.Println(emptyTree.Left())\n\n  \t// Output:\n  \t// 99 99\n  \t// <nil>\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"string",children:(0,t.jsx)(n.code,{children:"String"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["\u8bf4\u660e\uff1a ",(0,t.jsx)(n.code,{children:"String"})," \u8fd4\u56de ",(0,t.jsx)(n.code,{children:"tree"})," \u7684 ",(0,t.jsx)(n.code,{children:"node"})," \u663e\u793a\uff08\u7528\u4e8e\u8c03\u8bd5\uff09\u3002"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"\u683c\u5f0f\uff1a"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"String() string\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"\u793a\u4f8b\uff1a"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'func ExampleBTree_String() {\n  \ttree := gtree.NewBTree(3, gutil.ComparatorString)\n  \tfor i := 0; i < 6; i++ {\n  \t\ttree.Set("key"+gconv.String(i), "val"+gconv.String(i))\n  \t}\n\n  \tfmt.Println(tree.String())\n\n  \t// Output:\n  \t// key0\n  \t// key1\n  \t//     key2\n  \t// key3\n  \t//     key4\n  \t//     key5\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"search",children:(0,t.jsx)(n.code,{children:"Search"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["\u8bf4\u660e\uff1a ",(0,t.jsx)(n.code,{children:"Search"})," \u4f7f\u7528\u53c2\u6570 ",(0,t.jsx)(n.code,{children:"key"})," \u641c\u7d22 ",(0,t.jsx)(n.code,{children:"tree"}),"\u3002\u5982\u679c\u627e\u5230 ",(0,t.jsx)(n.code,{children:"key"}),"\uff0c\u5219\u8fd4\u56de\u5176\u5bf9\u5e94\u7684\u952e\u503c\uff0c\u5e76\u4e14\u8fd4\u56de\u53c2\u6570 ",(0,t.jsx)(n.code,{children:"found"})," \u4e3a ",(0,t.jsx)(n.code,{children:"true"}),"\uff0c\u5426\u5219\u4e3a ",(0,t.jsx)(n.code,{children:"false"}),"\u3002"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"\u683c\u5f0f\uff1a"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"Search(key interface{}) (value interface{}, found bool)\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"\u793a\u4f8b\uff1a"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'func ExampleBTree_Search() {\n  \ttree := gtree.NewBTree(3, gutil.ComparatorString)\n  \tfor i := 0; i < 6; i++ {\n  \t\ttree.Set("key"+gconv.String(i), "val"+gconv.String(i))\n  \t}\n\n  \tfmt.Println(tree.Search("key0"))\n  \tfmt.Println(tree.Search("key6"))\n\n  \t// Output:\n  \t// val0 true\n  \t// <nil> false\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"print",children:(0,t.jsx)(n.code,{children:"Print"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["\u8bf4\u660e\uff1a ",(0,t.jsx)(n.code,{children:"Print"})," \u5c06 ",(0,t.jsx)(n.code,{children:"tree"})," \u6253\u5370\u5230\u6807\u51c6\u8f93\u51fa\u3002"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"\u683c\u5f0f\uff1a"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"Print()\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"\u793a\u4f8b\uff1a"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'func ExampleBTree_Print() {\n  \ttree := gtree.NewBTree(3, gutil.ComparatorString)\n  \tfor i := 0; i < 6; i++ {\n  \t\ttree.Set("key"+gconv.String(i), "val"+gconv.String(i))\n  \t}\n\n  \ttree.Print()\n\n  \t// Output:\n  \t// key0\n  \t// key1\n  \t//     key2\n  \t// key3\n  \t//     key4\n  \t//     key5\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"iterator",children:(0,t.jsx)(n.code,{children:"Iterator"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["\u8bf4\u660e\uff1a ",(0,t.jsx)(n.code,{children:"Iterator"})," \u7b49\u540c\u4e8e ",(0,t.jsx)(n.code,{children:"IteratorAsc"})," \u3002"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"\u683c\u5f0f\uff1a"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"Iterator(f func(key, value interface{}) bool)\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"\u793a\u4f8b\uff1a"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'func ExampleBTree_Iterator() {\n  \ttree := gtree.NewBTree(3, gutil.ComparatorString)\n  \tfor i := 0; i < 10; i++ {\n  \t\ttree.Set(i, 10-i)\n  \t}\n\n  \tvar totalKey, totalValue int\n  \ttree.Iterator(func(key, value interface{}) bool {\n  \t\ttotalKey += key.(int)\n  \t\ttotalValue += value.(int)\n\n  \t\treturn totalValue < 20\n  \t})\n\n  \tfmt.Println("totalKey:", totalKey)\n  \tfmt.Println("totalValue:", totalValue)\n\n  \t// Output:\n  \t// totalKey: 3\n  \t// totalValue: 27\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"iteratorfrom",children:(0,t.jsx)(n.code,{children:"IteratorFrom"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["\u8bf4\u660e\uff1a ",(0,t.jsx)(n.code,{children:"IteratorFrom"})," \u7b49\u540c\u4e8e ",(0,t.jsx)(n.code,{children:"IteratorAscFrom"})," \u3002"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"\u683c\u5f0f\uff1a"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"IteratorFrom(key interface{}, match bool, f func(key, value interface{}) bool)\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"\u793a\u4f8b\uff1a"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'func ExampleBTree_IteratorFrom() {\n  \tm := make(map[interface{}]interface{})\n  \tfor i := 1; i <= 5; i++ {\n  \t\tm[i] = i * 10\n  \t}\n  \ttree := gtree.NewBTreeFrom(3, gutil.ComparatorInt, m)\n\n  \ttree.IteratorFrom(1, true, func(key, value interface{}) bool {\n  \t\tfmt.Println("key:", key, ", value:", value)\n  \t\treturn true\n  \t})\n\n  \t// Output:\n  \t// key: 1 , value: 10\n  \t// key: 2 , value: 20\n  \t// key: 3 , value: 30\n  \t// key: 4 , value: 40\n  \t// key: 5 , value: 50\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"iteratorasc",children:(0,t.jsx)(n.code,{children:"IteratorAsc"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["\u8bf4\u660e\uff1a ",(0,t.jsx)(n.code,{children:"IteratorAsc"})," \u4f7f\u7528\u81ea\u5b9a\u4e49\u56de\u8c03\u51fd\u6570 ",(0,t.jsx)(n.code,{children:"f"})," \u4ee5\u53ea\u8bfb\u65b9\u5f0f\u6309\u5347\u5e8f\u8fed\u4ee3 ",(0,t.jsx)(n.code,{children:"tree"}),"\u3002\u5982\u679c ",(0,t.jsx)(n.code,{children:"f"})," \u8fd4\u56de ",(0,t.jsx)(n.code,{children:"true"}),"\uff0c\u5219\u7ee7\u7eed\u8fed\u4ee3\uff0c\u8fd4\u56de ",(0,t.jsx)(n.code,{children:"false"})," \u5219\u505c\u6b62\u3002"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"\u683c\u5f0f\uff1a"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"IteratorAsc(f func(key, value interface{}) bool)\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"\u793a\u4f8b\uff1a"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'func ExampleBTree_IteratorAsc() {\n  \ttree := gtree.NewBTree(3, gutil.ComparatorString)\n  \tfor i := 0; i < 10; i++ {\n  \t\ttree.Set(i, 10-i)\n  \t}\n\n  \ttree.IteratorAsc(func(key, value interface{}) bool {\n  \t\tfmt.Println("key:", key, ", value:", value)\n  \t\treturn true\n  \t})\n\n  \t// Output:\n  \t// key: 0 , value: 10\n  \t// key: 1 , value: 9\n  \t// key: 2 , value: 8\n  \t// key: 3 , value: 7\n  \t// key: 4 , value: 6\n  \t// key: 5 , value: 5\n  \t// key: 6 , value: 4\n  \t// key: 7 , value: 3\n  \t// key: 8 , value: 2\n  \t// key: 9 , value: 1\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"iteratorascfrom",children:(0,t.jsx)(n.code,{children:"IteratorAscFrom"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["\u8bf4\u660e\uff1a ",(0,t.jsx)(n.code,{children:"IteratorAscFrom"})," \u4f7f\u7528\u81ea\u5b9a\u4e49\u56de\u8c03\u51fd\u6570 ",(0,t.jsx)(n.code,{children:"f"})," \u4ee5\u53ea\u8bfb\u65b9\u5f0f\u6309\u5347\u5e8f\u8fed\u4ee3 ",(0,t.jsx)(n.code,{children:"tree"}),"\u3002\u53c2\u6570 ",(0,t.jsx)(n.code,{children:"key"})," \u6307\u5b9a\u4ece\u54ea\u4e2a ",(0,t.jsx)(n.code,{children:"key"})," \u5f00\u59cb\u8fed\u4ee3\u3002\u53c2\u6570 ",(0,t.jsx)(n.code,{children:"match"})," \u4e3a ",(0,t.jsx)(n.code,{children:"true"})," \u65f6\uff0c\u4ece ",(0,t.jsx)(n.code,{children:"key"})," \u5b8c\u5168\u5339\u914d\u65f6\u5f00\u59cb\u8fed\u4ee3\uff0c\u5426\u5219\u4f7f\u7528\u7d22\u5f15\u641c\u7d22\u8fed\u4ee3\u3002\u5982\u679c ",(0,t.jsx)(n.code,{children:"f"})," \u8fd4\u56de ",(0,t.jsx)(n.code,{children:"true"}),"\uff0c\u5219\u7ee7\u7eed\u8fed\u4ee3\uff0c\u8fd4\u56de ",(0,t.jsx)(n.code,{children:"false"})," \u5219\u505c\u6b62\u3002"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"\u683c\u5f0f\uff1a"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"IteratorAscFrom(key interface{}, match bool, f func(key, value interface{}) bool)\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"\u793a\u4f8b\uff1a"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'func ExampleBTree_IteratorAscFrom_Normal() {\n  \tm := make(map[interface{}]interface{})\n  \tfor i := 1; i <= 5; i++ {\n  \t\tm[i] = i * 10\n  \t}\n  \ttree := gtree.NewBTreeFrom(3, gutil.ComparatorInt, m)\n\n  \ttree.IteratorAscFrom(1, true, func(key, value interface{}) bool {\n  \t\tfmt.Println("key:", key, ", value:", value)\n  \t\treturn true\n  \t})\n\n  \t// Output:\n  \t// key: 1 , value: 10\n  \t// key: 2 , value: 20\n  \t// key: 3 , value: 30\n  \t// key: 4 , value: 40\n  \t// key: 5 , value: 50\n}\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'func ExampleBTree_IteratorAscFrom_NoExistKey() {\n  \tm := make(map[interface{}]interface{})\n  \tfor i := 1; i <= 5; i++ {\n  \t\tm[i] = i * 10\n  \t}\n  \ttree := gtree.NewBTreeFrom(3, gutil.ComparatorInt, m)\n\n  \ttree.IteratorAscFrom(0, true, func(key, value interface{}) bool {\n  \t\tfmt.Println("key:", key, ", value:", value)\n  \t\treturn true\n  \t})\n\n  \t// Output:\n}\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'func ExampleBTree_IteratorAscFrom_NoExistKeyAndMatchFalse() {\n  \tm := make(map[interface{}]interface{})\n  \tfor i := 1; i <= 5; i++ {\n  \t\tm[i] = i * 10\n  \t}\n  \ttree := gtree.NewBTreeFrom(3, gutil.ComparatorInt, m)\n\n  \ttree.IteratorAscFrom(0, false, func(key, value interface{}) bool {\n  \t\tfmt.Println("key:", key, ", value:", value)\n  \t\treturn true\n  \t})\n\n  \t// Output:\n  \t// key: 1 , value: 10\n  \t// key: 2 , value: 20\n  \t// key: 3 , value: 30\n  \t// key: 4 , value: 40\n  \t// key: 5 , value: 50\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"iteratordesc",children:(0,t.jsx)(n.code,{children:"IteratorDesc"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["\u8bf4\u660e\uff1a ",(0,t.jsx)(n.code,{children:"IteratorDesc"})," \u4f7f\u7528\u81ea\u5b9a\u4e49\u56de\u8c03\u51fd\u6570 ",(0,t.jsx)(n.code,{children:"f"})," \u4ee5\u53ea\u8bfb\u65b9\u5f0f\u6309\u964d\u5e8f\u8fed\u4ee3 ",(0,t.jsx)(n.code,{children:"tree"}),"\u3002\u5982\u679c ",(0,t.jsx)(n.code,{children:"f"})," \u8fd4\u56de ",(0,t.jsx)(n.code,{children:"true"}),"\uff0c\u5219\u7ee7\u7eed\u8fed\u4ee3\uff0c\u8fd4\u56de ",(0,t.jsx)(n.code,{children:"false"})," \u5219\u505c\u6b62\u3002"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"\u683c\u5f0f\uff1a"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"IteratorDesc(f func(key, value interface{}) bool)\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"\u793a\u4f8b\uff1a"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'func ExampleBTree_IteratorDesc() {\n  \ttree := gtree.NewBTree(3, gutil.ComparatorString)\n  \tfor i := 0; i < 10; i++ {\n  \t\ttree.Set(i, 10-i)\n  \t}\n\n  \ttree.IteratorDesc(func(key, value interface{}) bool {\n  \t\tfmt.Println("key:", key, ", value:", value)\n  \t\treturn true\n  \t})\n\n  \t// Output:\n  \t// key: 9 , value: 1\n  \t// key: 8 , value: 2\n  \t// key: 7 , value: 3\n  \t// key: 6 , value: 4\n  \t// key: 5 , value: 5\n  \t// key: 4 , value: 6\n  \t// key: 3 , value: 7\n  \t// key: 2 , value: 8\n  \t// key: 1 , value: 9\n  \t// key: 0 , value: 10\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"iteratordescfrom",children:(0,t.jsx)(n.code,{children:"IteratorDescFrom"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["\u8bf4\u660e\uff1a ",(0,t.jsx)(n.code,{children:"IteratorDescFrom"})," \u4f7f\u7528\u81ea\u5b9a\u4e49\u56de\u8c03\u51fd\u6570 ",(0,t.jsx)(n.code,{children:"f"})," \u4ee5\u53ea\u8bfb\u65b9\u5f0f\u6309\u964d\u5e8f\u8fed\u4ee3 ",(0,t.jsx)(n.code,{children:"tree"}),"\u3002\u53c2\u6570 ",(0,t.jsx)(n.code,{children:"key"})," \u6307\u5b9a\u4ece\u54ea\u4e2a ",(0,t.jsx)(n.code,{children:"key"})," \u5f00\u59cb\u8fed\u4ee3\u3002\u53c2\u6570 ",(0,t.jsx)(n.code,{children:"match"})," \u4e3a ",(0,t.jsx)(n.code,{children:"true"})," \u65f6\uff0c\u4ece ",(0,t.jsx)(n.code,{children:"key"})," \u5b8c\u5168\u5339\u914d\u65f6\u5f00\u59cb\u8fed\u4ee3\uff0c\u5426\u5219\u4f7f\u7528\u7d22\u5f15\u641c\u7d22\u8fed\u4ee3\u3002\u5982\u679c ",(0,t.jsx)(n.code,{children:"f"})," \u8fd4\u56de ",(0,t.jsx)(n.code,{children:"true"}),"\uff0c\u5219\u7ee7\u7eed\u8fed\u4ee3\uff0c\u8fd4\u56de ",(0,t.jsx)(n.code,{children:"false"})," \u5219\u505c\u6b62\u3002"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"\u683c\u5f0f\uff1a"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"IteratorDescFrom(key interface{}, match bool, f func(key, value interface{}) bool)\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"\u793a\u4f8b\uff1a"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'func ExampleBTree_IteratorDescFrom() {\n  \tm := make(map[interface{}]interface{})\n  \tfor i := 1; i <= 5; i++ {\n  \t\tm[i] = i * 10\n  \t}\n  \ttree := gtree.NewBTreeFrom(3, gutil.ComparatorInt, m)\n\n  \ttree.IteratorDescFrom(5, true, func(key, value interface{}) bool {\n  \t\tfmt.Println("key:", key, ", value:", value)\n  \t\treturn true\n  \t})\n\n  \t// Output:\n  \t// key: 5 , value: 50\n  \t// key: 4 , value: 40\n  \t// key: 3 , value: 30\n  \t// key: 2 , value: 20\n  \t// key: 1 , value: 10\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"marshaljson",children:(0,t.jsx)(n.code,{children:"MarshalJson"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["\u8bf4\u660e\uff1a ",(0,t.jsx)(n.code,{children:"MarshalJSON"})," \u5b9e\u73b0 ",(0,t.jsx)(n.code,{children:"json.Marshal"})," \u7684\u63a5\u53e3\u3002"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"\u683c\u5f0f\uff1a"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"MarshalJSON() ([]byte, error)\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"\u793a\u4f8b\uff1a"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'func ExampleBTree_MarshalJSON() {\n  \ttree := gtree.NewBTree(3, gutil.ComparatorString)\n  \tfor i := 0; i < 6; i++ {\n  \t\ttree.Set("key"+gconv.String(i), "val"+gconv.String(i))\n  \t}\n\n  \tbytes, err := json.Marshal(tree)\n  \tif err == nil {\n  \t\tfmt.Println(gconv.String(bytes))\n  \t}\n\n  \t// Output:\n  \t// {"key0":"val0","key1":"val1","key2":"val2","key3":"val3","key4":"val4","key5":"val5"}\n}\n'})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>c,x:()=>d});var t=r(96540);const i={},l=t.createContext(i);function c(e){const n=t.useContext(l);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),t.createElement(l.Provider,{value:n},e.children)}}}]);